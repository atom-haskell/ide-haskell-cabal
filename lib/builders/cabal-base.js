"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
const path_1 = require("path");
class CabalBase extends base_1.BuilderBase {
    constructor(opts) {
        super('cabal', opts);
        const map = {
            '7.2': atom.config.get('ide-haskell-cabal.cabal.ghc702'),
            '7.4': atom.config.get('ide-haskell-cabal.cabal.ghc704'),
            '7.6': atom.config.get('ide-haskell-cabal.cabal.ghc706'),
            '7.8': atom.config.get('ide-haskell-cabal.cabal.ghc708'),
            '7.10': atom.config.get('ide-haskell-cabal.cabal.ghc710'),
            '8.0': atom.config.get('ide-haskell-cabal.cabal.ghc800'),
            '8.2': atom.config.get('ide-haskell-cabal.cabal.ghc802'),
        };
        this.cabalOpts =
            map[atom.config.get('ide-haskell-cabal.cabal.activeGhcVersion')];
    }
    additionalEnvSetup(env) {
        const opts = this.cabalOpts;
        const ghcPath = opts.pathTo;
        if (opts.pathExclusive) {
            env.PATH = ghcPath.join(path_1.delimiter);
        }
        else if (ghcPath.length > 0) {
            env.PATH = ghcPath
                .concat((env.PATH || '').split(path_1.delimiter))
                .join(path_1.delimiter);
        }
        return env;
    }
    component() {
        switch (this.opts.target.type) {
            case 'all':
                this.cabalArgs.push(...this.opts.target.targets.map((x) => x.target));
                break;
            case 'component':
                this.cabalArgs.push(this.opts.target.component);
                break;
            case 'auto':
                break;
        }
    }
}
exports.CabalBase = CabalBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwtYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9jYWJhbC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaUNBQThDO0FBQzlDLCtCQUFnQztBQUVoQyxlQUFnQyxTQUFRLGtCQUFXO0lBRWpELFlBQVksSUFBYztRQUN4QixLQUFLLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBQ3BCLE1BQU0sR0FBRyxHQUFHO1lBQ1YsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDO1lBQ3hELEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQztZQUN4RCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUM7WUFDeEQsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDO1lBQ3hELE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQztZQUN6RCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUM7WUFDeEQsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDO1NBQ3pELENBQUE7UUFDRCxJQUFJLENBQUMsU0FBUztZQUNaLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUE7SUFDcEUsQ0FBQztJQUVTLGtCQUFrQixDQUFDLEdBQXVCO1FBQ2xELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUMzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN2QixHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1FBQ3BDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTztpQkFDZixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBUyxDQUFDLENBQUM7aUJBQ3pDLElBQUksQ0FBQyxnQkFBUyxDQUFDLENBQUE7UUFDcEIsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRVMsU0FBUztRQUNqQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO2dCQUNyRSxLQUFLLENBQUE7WUFDUCxLQUFLLFdBQVc7Z0JBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7Z0JBQy9DLEtBQUssQ0FBQTtZQUNQLEtBQUssTUFBTTtnQkFDVCxLQUFLLENBQUE7UUFDVCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBM0NELDhCQTJDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEN0b3JPcHRzLCBCdWlsZGVyQmFzZSB9IGZyb20gJy4vYmFzZSdcbmltcG9ydCB7IGRlbGltaXRlciB9IGZyb20gJ3BhdGgnXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYWJhbEJhc2UgZXh0ZW5kcyBCdWlsZGVyQmFzZSB7XG4gIHByb3RlY3RlZCBjYWJhbE9wdHM6IEdIQ1ZlclByb3BzXG4gIGNvbnN0cnVjdG9yKG9wdHM6IEN0b3JPcHRzKSB7XG4gICAgc3VwZXIoJ2NhYmFsJywgb3B0cylcbiAgICBjb25zdCBtYXAgPSB7XG4gICAgICAnNy4yJzogYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDInKSxcbiAgICAgICc3LjQnOiBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwNCcpLFxuICAgICAgJzcuNic6IGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzA2JyksXG4gICAgICAnNy44JzogYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDgnKSxcbiAgICAgICc3LjEwJzogYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MTAnKSxcbiAgICAgICc4LjAnOiBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwMCcpLFxuICAgICAgJzguMic6IGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODAyJyksXG4gICAgfVxuICAgIHRoaXMuY2FiYWxPcHRzID1cbiAgICAgIG1hcFthdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmFjdGl2ZUdoY1ZlcnNpb24nKV1cbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRpdGlvbmFsRW52U2V0dXAoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy5jYWJhbE9wdHNcbiAgICBjb25zdCBnaGNQYXRoID0gb3B0cy5wYXRoVG9cbiAgICBpZiAob3B0cy5wYXRoRXhjbHVzaXZlKSB7XG4gICAgICBlbnYuUEFUSCA9IGdoY1BhdGguam9pbihkZWxpbWl0ZXIpXG4gICAgfSBlbHNlIGlmIChnaGNQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgIGVudi5QQVRIID0gZ2hjUGF0aFxuICAgICAgICAuY29uY2F0KChlbnYuUEFUSCB8fCAnJykuc3BsaXQoZGVsaW1pdGVyKSlcbiAgICAgICAgLmpvaW4oZGVsaW1pdGVyKVxuICAgIH1cblxuICAgIHJldHVybiBlbnZcbiAgfVxuXG4gIHByb3RlY3RlZCBjb21wb25lbnQoKSB7XG4gICAgc3dpdGNoICh0aGlzLm9wdHMudGFyZ2V0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2FsbCc6XG4gICAgICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goLi4udGhpcy5vcHRzLnRhcmdldC50YXJnZXRzLm1hcCgoeCkgPT4geC50YXJnZXQpKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY29tcG9uZW50JzpcbiAgICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaCh0aGlzLm9wdHMudGFyZ2V0LmNvbXBvbmVudClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuIl19