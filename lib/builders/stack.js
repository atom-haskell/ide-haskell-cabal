"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
class Builder extends base_1.BuilderBase {
    constructor(opts) {
        super('stack', opts);
        this.cabalArgs =
            atom.config.get('ide-haskell-cabal.stack.globalArguments') || [];
    }
    async build() {
        this.cabalArgs.push('build');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.buildArguments') || []));
        return this.runCabal(['--no-run-tests', '--no-run-benchmarks']);
    }
    async test() {
        this.cabalArgs.push('test');
        this.project();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.testArguments') || []));
        return this.runBuild();
    }
    async bench() {
        this.cabalArgs.push('bench');
        this.project();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.benchArguments') || []));
        return this.runBuild();
    }
    async clean() {
        this.cabalArgs.push('clean');
        this.project();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.cleanArguments') || []));
        return this.runCabal();
    }
    async deps() {
        this.cabalArgs.push('build', '--only-dependencies');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.depsArguments') || []));
        return this.runCabal();
    }
    fixTarget(comp) {
        if (comp.startsWith('lib:')) {
            comp = 'lib';
        }
        return `${this.opts.target.project}:${comp}`;
    }
    project() {
        switch (this.opts.target.type) {
            case 'all':
            case 'component':
                this.cabalArgs.push(this.opts.target.project);
                break;
            case 'auto':
                break;
        }
    }
    component() {
        switch (this.opts.target.type) {
            case 'all':
                this.cabalArgs.push(...this.opts.target.targets.map((x) => this.fixTarget(x.target)));
                break;
            case 'component':
                this.cabalArgs.push(this.fixTarget(this.opts.target.component));
                break;
            case 'auto':
                break;
        }
    }
    async runBuild() {
        const oldSeverity = this.opts.opts.severity;
        this.opts.opts.severity = 'build';
        const res = await this.runCabal(['--no-run-tests', '--no-run-benchmarks']);
        this.opts.opts.severity = oldSeverity;
        console.error(res.exitCode);
        if (res.exitCode !== 0) {
            return res;
        }
        else {
            return this.runCabal();
        }
    }
}
exports.Builder = Builder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRlcnMvc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBOEM7QUFFOUMsYUFBcUIsU0FBUSxrQkFBVztJQUN0QyxZQUFZLElBQWM7UUFDeEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsU0FBUztZQUNaLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHlDQUF5QyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ3BFLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSztRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUNyRSxDQUFBO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUE7SUFDakUsQ0FBQztJQUNNLEtBQUssQ0FBQyxJQUFJO1FBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDM0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUNwRSxDQUFBO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQUs7UUFDaEIsSUFBSSxD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QUFRLENBQUE7UUFDM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQTtRQUNqQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDLENBQUE7UUFDMUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQTtRQUNyQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMzQixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxDQUFDLEdBQUcsQ0FBQTtRQUNaLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7UUFDeEIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQTdGRCwwQkE2RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdG9yT3B0cywgQnVpbGRlckJhc2UgfSBmcm9tICcuL2Jhc2UnXG5cbmV4cG9ydCBjbGFzcyBCdWlsZGVyIGV4dGVuZHMgQnVpbGRlckJhc2Uge1xuICBjb25zdHJ1Y3RvcihvcHRzOiBDdG9yT3B0cykge1xuICAgIHN1cGVyKCdzdGFjaycsIG9wdHMpXG4gICAgdGhpcy5jYWJhbEFyZ3MgPVxuICAgICAgYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay5nbG9iYWxBcmd1bWVudHMnKSB8fCBbXVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGJ1aWxkKCkge1xuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goJ2J1aWxkJylcbiAgICB0aGlzLmNvbXBvbmVudCgpXG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaChcbiAgICAgIC4uLihhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLmJ1aWxkQXJndW1lbnRzJykgfHwgW10pLFxuICAgIClcbiAgICByZXR1cm4gdGhpcy5ydW5DYWJhbChbJy0tbm8tcnVuLXRlc3RzJywgJy0tbm8tcnVuLWJlbmNobWFya3MnXSlcbiAgfVxuICBwdWJsaWMgYXN5bmMgdGVzdCgpIHtcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKCd0ZXN0JylcbiAgICB0aGlzLnByb2plY3QoKVxuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goXG4gICAgICAuLi4oYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay50ZXN0QXJndW1lbnRzJykgfHwgW10pLFxuICAgIClcbiAgICByZXR1cm4gdGhpcy5ydW5CdWlsZCgpXG4gIH1cbiAgcHVibGljIGFzeW5jIGJlbmNoKCkge1xuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goJ2JlbmNoJylcbiAgICB0aGlzLnByb2plY3QoKVxuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goXG4gICAgICAuLi4oYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay5iZW5jaEFyZ3VtZW50cycpIHx8IFtdKSxcbiAgICApXG4gICAgcmV0dXJuIHRoaXMucnVuQnVpbGQoKVxuICB9XG4gIHB1YmxpYyBhc3luYyBjbGVhbigpIHtcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKCdjbGVhbicpXG4gICAgdGhpcy5wcm9qZWN0KClcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKFxuICAgICAgLi4uKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuc3RhY2suY2xlYW5Bcmd1bWVudHMnKSB8fCBbXSksXG4gICAgKVxuICAgIHJldHVybiB0aGlzLnJ1bkNhYmFsKClcbiAgfVxuICBwdWJsaWMgYXN5bmMgZGVwcygpIHtcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKCdidWlsZCcsICctLW9ubHktZGVwZW5kZW5jaWVzJylcbiAgICB0aGlzLmNvbXBvbmVudCgpXG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaChcbiAgICAgIC4uLihhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLmRlcHNBcmd1bWVudHMnKSB8fCBbXSksXG4gICAgKVxuICAgIHJldHVybiB0aGlzLnJ1bkNhYmFsKClcbiAgfVxuXG4gIHByaXZhdGUgZml4VGFyZ2V0KGNvbXA6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKGNvbXAuc3RhcnRzV2l0aCgnbGliOicpKSB7XG4gICAgICBjb21wID0gJ2xpYidcbiAgICB9XG4gICAgcmV0dXJuIGAke3RoaXMub3B0cy50YXJnZXQucHJvamVjdH06JHtjb21wfWBcbiAgfVxuXG4gIHByaXZhdGUgcHJvamVjdCgpIHtcbiAgICBzd2l0Y2ggKHRoaXMub3B0cy50YXJnZXQudHlwZSkge1xuICAgICAgY2FzZSAnYWxsJzpcbiAgICAgIGNhc2UgJ2NvbXBvbmVudCc6XG4gICAgICAgIHRoaXMuY2FiYWxBcmdzLnB1c2godGhpcy5vcHRzLnRhcmdldC5wcm9qZWN0KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb21wb25lbnQoKSB7XG4gICAgc3dpdGNoICh0aGlzLm9wdHMudGFyZ2V0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2FsbCc6XG4gICAgICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goXG4gICAgICAgICAgLi4udGhpcy5vcHRzLnRhcmdldC50YXJnZXRzLm1hcCgoeCkgPT4gdGhpcy5maXhUYXJnZXQoeC50YXJnZXQpKSxcbiAgICAgICAgKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY29tcG9uZW50JzpcbiAgICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaCh0aGlzLmZpeFRhcmdldCh0aGlzLm9wdHMudGFyZ2V0LmNvbXBvbmVudCkpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdhdXRvJzpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJ1bkJ1aWxkKCkge1xuICAgIGNvbnN0IG9sZFNldmVyaXR5ID0gdGhpcy5vcHRzLm9wdHMuc2V2ZXJpdHlcbiAgICB0aGlzLm9wdHMub3B0cy5zZXZlcml0eSA9ICdidWlsZCdcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLnJ1bkNhYmFsKFsnLS1uby1ydW4tdGVzdHMnLCAnLS1uby1ydW4tYmVuY2htYXJrcyddKVxuICAgIHRoaXMub3B0cy5vcHRzLnNldmVyaXR5ID0gb2xkU2V2ZXJpdHlcbiAgICBjb25zb2xlLmVycm9yKHJlcy5leGl0Q29kZSlcbiAgICBpZiAocmVzLmV4aXRDb2RlICE9PSAwKSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJ1bkNhYmFsKClcbiAgICB9XG4gIH1cbn1cbiJdfQ==