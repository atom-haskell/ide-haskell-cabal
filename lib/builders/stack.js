"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
class Builder extends base_1.BuilderBase {
    constructor(opts) {
        super('stack', opts);
        this.cabalArgs =
            atom.config.get('ide-haskell-cabal.stack.globalArguments') || [];
    }
    async build() {
        this.cabalArgs.push('build');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.buildArguments') || []));
        return this.runCabal(['--no-run-tests', '--no-run-benchmarks']);
    }
    async test() {
        this.cabalArgs.push('test');
        this.project();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.testArguments') || []));
        return this.runBuild();
    }
    async bench() {
        this.cabalArgs.push('bench');
        this.project();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.benchArguments') || []));
        return this.runBuild();
    }
    async clean() {
        this.cabalArgs.push('clean');
        this.project();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.cleanArguments') || []));
        return this.runCabal();
    }
    async deps() {
        this.cabalArgs.push('build', '--only-dependencies');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.depsArguments') || []));
        return this.runCabal();
    }
    fixTarget(comp) {
        if (comp.startsWith('lib:')) {
            comp = 'lib';
        }
        return `${this.opts.target.project}:${comp}`;
    }
    project() {
        switch (this.opts.target.type) {
            case 'all':
            case 'component':
                this.cabalArgs.push(this.opts.target.project);
                break;
            case 'auto':
                break;
        }
    }
    component() {
        switch (this.opts.target.type) {
            case 'all':
                this.cabalArgs.push(...this.opts.target.targets.map((x) => this.fixTarget(x.target)));
                break;
            case 'component':
                this.cabalArgs.push(this.fixTarget(this.opts.target.component));
                break;
            case 'auto':
                break;
        }
    }
    async runBuild() {
        const oldSeverity = this.opts.opts.severity;
        this.opts.opts.severity = 'build';
        const res = await this.runCabal(['--no-run-tests', '--no-run-benchmarks']);
        this.opts.opts.severity = oldSeverity;
        console.error(res.exitCode);
        if (res.exitCode !== 0) {
            return res;
        }
        else {
            return this.runCabal();
        }
    }
}
exports.Builder = Builder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRlcnMvc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBOEM7QUFFOUMsTUFBYSxPQUFRLFNBQVEsa0JBQVc7SUFDdEMsWUFBWSxJQUFjO1FBQ3hCLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDcEIsSUFBSSxDQUFDLFNBQVM7WUFDWixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyx5Q0FBeUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNwRSxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDNUIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFBO1FBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUNqQixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDckUsQ0FBQTtRQUNELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBQ00sS0FBSyxDQUFDLElBQUk7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMzQixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUE7UUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVDQUF1QyxDQUFDLElBQUksRUFBRSxDQUFDLENBQ3BFLENBQUE7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQUs7UUFDaEIsSUFBSSxDQUFDLFNB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RSxxQkFBcUIsQ0FBQyxDQUFDLENBQUE7UUFDMUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQTtRQUNyQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMzQixJQUFJLEdBQUcsQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sR0FBRyxDQUFBO1NBQ1g7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO1NBQ3ZCO0lBQ0gsQ0FBQztDQUNGO0FBN0ZELDBCQTZGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEN0b3JPcHRzLCBCdWlsZGVyQmFzZSB9IGZyb20gJy4vYmFzZSdcblxuZXhwb3J0IGNsYXNzIEJ1aWxkZXIgZXh0ZW5kcyBCdWlsZGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHM6IEN0b3JPcHRzKSB7XG4gICAgc3VwZXIoJ3N0YWNrJywgb3B0cylcbiAgICB0aGlzLmNhYmFsQXJncyA9XG4gICAgICBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLmdsb2JhbEFyZ3VtZW50cycpIHx8IFtdXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYnVpbGQoKSB7XG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaCgnYnVpbGQnKVxuICAgIHRoaXMuY29tcG9uZW50KClcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKFxuICAgICAgLi4uKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuc3RhY2suYnVpbGRBcmd1bWVudHMnKSB8fCBbXSksXG4gICAgKVxuICAgIHJldHVybiB0aGlzLnJ1bkNhYmFsKFsnLS1uby1ydW4tdGVzdHMnLCAnLS1uby1ydW4tYmVuY2htYXJrcyddKVxuICB9XG4gIHB1YmxpYyBhc3luYyB0ZXN0KCkge1xuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goJ3Rlc3QnKVxuICAgIHRoaXMucHJvamVjdCgpXG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaChcbiAgICAgIC4uLihhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLnRlc3RBcmd1bWVudHMnKSB8fCBbXSksXG4gICAgKVxuICAgIHJldHVybiB0aGlzLnJ1bkJ1aWxkKClcbiAgfVxuICBwdWJsaWMgYXN5bmMgYmVuY2goKSB7XG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaCgnYmVuY2gnKVxuICAgIHRoaXMucHJvamVjdCgpXG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaChcbiAgICAgIC4uLihhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLmJlbmNoQXJndW1lbnRzJykgfHwgW10pLFxuICAgIClcbiAgICByZXR1cm4gdGhpcy5ydW5CdWlsZCgpXG4gIH1cbiAgcHVibGljIGFzeW5jIGNsZWFuKCkge1xuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goJ2NsZWFuJylcbiAgICB0aGlzLnByb2plY3QoKVxuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goXG4gICAgICAuLi4oYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay5jbGVhbkFyZ3VtZW50cycpIHx8IFtdKSxcbiAgICApXG4gICAgcmV0dXJuIHRoaXMucnVuQ2FiYWwoKVxuICB9XG4gIHB1YmxpYyBhc3luYyBkZXBzKCkge1xuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goJ2J1aWxkJywgJy0tb25seS1kZXBlbmRlbmNpZXMnKVxuICAgIHRoaXMuY29tcG9uZW50KClcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKFxuICAgICAgLi4uKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuc3RhY2suZGVwc0FyZ3VtZW50cycpIHx8IFtdKSxcbiAgICApXG4gICAgcmV0dXJuIHRoaXMucnVuQ2FiYWwoKVxuICB9XG5cbiAgcHJpdmF0ZSBmaXhUYXJnZXQoY29tcDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoY29tcC5zdGFydHNXaXRoKCdsaWI6JykpIHtcbiAgICAgIGNvbXAgPSAnbGliJ1xuICAgIH1cbiAgICByZXR1cm4gYCR7dGhpcy5vcHRzLnRhcmdldC5wcm9qZWN0fToke2NvbXB9YFxuICB9XG5cbiAgcHJpdmF0ZSBwcm9qZWN0KCkge1xuICAgIHN3aXRjaCAodGhpcy5vcHRzLnRhcmdldC50eXBlKSB7XG4gICAgICBjYXNlICdhbGwnOlxuICAgICAgY2FzZSAnY29tcG9uZW50JzpcbiAgICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaCh0aGlzLm9wdHMudGFyZ2V0LnByb2plY3QpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdhdXRvJzpcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbXBvbmVudCgpIHtcbiAgICBzd2l0Y2ggKHRoaXMub3B0cy50YXJnZXQudHlwZSkge1xuICAgICAgY2FzZSAnYWxsJzpcbiAgICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaChcbiAgICAgICAgICAuLi50aGlzLm9wdHMudGFyZ2V0LnRhcmdldHMubWFwKCh4KSA9PiB0aGlzLmZpeFRhcmdldCh4LnRhcmdldCkpLFxuICAgICAgICApXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjb21wb25lbnQnOlxuICAgICAgICB0aGlzLmNhYmFsQXJncy5wdXNoKHRoaXMuZml4VGFyZ2V0KHRoaXMub3B0cy50YXJnZXQuY29tcG9uZW50KSlcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcnVuQnVpbGQoKSB7XG4gICAgY29uc3Qgb2xkU2V2ZXJpdHkgPSB0aGlzLm9wdHMub3B0cy5zZXZlcml0eVxuICAgIHRoaXMub3B0cy5vcHRzLnNldmVyaXR5ID0gJ2J1aWxkJ1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucnVuQ2FiYWwoWyctLW5vLXJ1bi10ZXN0cycsICctLW5vLXJ1bi1iZW5jaG1hcmtzJ10pXG4gICAgdGhpcy5vcHRzLm9wdHMuc2V2ZXJpdHkgPSBvbGRTZXZlcml0eVxuICAgIGNvbnNvbGUuZXJyb3IocmVzLmV4aXRDb2RlKVxuICAgIGlmIChyZXMuZXhpdENvZGUgIT09IDApIHtcbiAgICAgIHJldHVybiByZXNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucnVuQ2FiYWwoKVxuICAgIH1cbiAgfVxufVxuIl19