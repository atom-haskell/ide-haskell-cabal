"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./base");
class Builder extends base_1.BuilderBase {
    constructor(opts) {
        super('stack', opts);
        this.cabalArgs = atom.config.get('ide-haskell-cabal.stack.globalArguments') || [];
    }
    async build() {
        this.cabalArgs.push('build');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.buildArguments') || []));
        return this.runCabal(['--no-run-tests', '--no-run-benchmarks']);
    }
    async test() {
        this.cabalArgs.push('test');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.testArguments') || []));
        return this.runBuild();
    }
    async bench() {
        this.cabalArgs.push('bench');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.benchArguments') || []));
        return this.runBuild();
    }
    async clean() {
        this.cabalArgs.push('clean');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.cleanArguments') || []));
        return this.runCabal();
    }
    async deps() {
        this.cabalArgs.push('build', '--only-dependencies');
        this.component();
        this.cabalArgs.push(...(atom.config.get('ide-haskell-cabal.stack.depsArguments') || []));
        return this.runCabal();
    }
    component() {
        let comp = (this.opts.target.target && this.opts.target.target.target)
            || this.opts.target.component;
        if (comp) {
            if (comp.startsWith('lib:')) {
                comp = 'lib';
            }
            comp = `${this.opts.target.project}:${comp}`;
            this.cabalArgs.push(comp);
        }
    }
    async runBuild() {
        const oldSeverity = this.opts.opts.severity;
        this.opts.opts.severity = 'build';
        const res = await this.runCabal(['--no-run-tests', '--no-run-benchmarks']);
        this.opts.opts.severity = oldSeverity;
        if (res.exitCode !== 0) {
            return res;
        }
        else {
            return this.runCabal();
        }
    }
}
exports.Builder = Builder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRlcnMvc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpQ0FBOEM7QUFFOUMsYUFBcUIsU0FBUSxrQkFBVztJQUN0QyxZQUFZLElBQWM7UUFDeEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHlDQUF5QyxDQUFDLElBQUksRUFBRSxDQUFBO0lBQ25GLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSztRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN6RixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLHFCQUFxQixDQUFDLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBQ00sS0FBSyxDQUFDLElBQUk7UUFDZixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUMzQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHVDQUF1QyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN4RixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBSztRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN6RixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBSztRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHdDQUF3QyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN6RixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFDTSxLQUFLLENBQUMsSUFBSTtRQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxxQkFBcUIsQ0FBQyxDQUFBO1FBQ25ELElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQTtRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3hGLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVPLFNBQVM7UUFDZixJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2VBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQTtRQUN2QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQTtZQUFDLENBQUM7WUFDN0MsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFBO1lBQzVDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzNCLENBQUM7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLFFBQVE7UUFDcEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUE7UUFDakMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxDQUFBO1FBQzFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUE7UUFDckMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUE7UUFDWixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQ3hCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUExREQsMEJBMERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3Rvck9wdHMsIEJ1aWxkZXJCYXNlIH0gZnJvbSAnLi9iYXNlJ1xuXG5leHBvcnQgY2xhc3MgQnVpbGRlciBleHRlbmRzIEJ1aWxkZXJCYXNlIHtcbiAgY29uc3RydWN0b3Iob3B0czogQ3Rvck9wdHMpIHtcbiAgICBzdXBlcignc3RhY2snLCBvcHRzKVxuICAgIHRoaXMuY2FiYWxBcmdzID0gYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay5nbG9iYWxBcmd1bWVudHMnKSB8fCBbXVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGJ1aWxkKCkge1xuICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goJ2J1aWxkJylcbiAgICB0aGlzLmNvbXBvbmVudCgpXG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaCguLi4oYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay5idWlsZEFyZ3VtZW50cycpIHx8IFtdKSlcbiAgICByZXR1cm4gdGhpcy5ydW5DYWJhbChbJy0tbm8tcnVuLXRlc3RzJywgJy0tbm8tcnVuLWJlbmNobWFya3MnXSlcbiAgfVxuICBwdWJsaWMgYXN5bmMgdGVzdCgpIHtcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKCd0ZXN0JylcbiAgICB0aGlzLmNvbXBvbmVudCgpXG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaCguLi4oYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay50ZXN0QXJndW1lbnRzJykgfHwgW10pKVxuICAgIHJldHVybiB0aGlzLnJ1bkJ1aWxkKClcbiAgfVxuICBwdWJsaWMgYXN5bmMgYmVuY2goKSB7XG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaCgnYmVuY2gnKVxuICAgIHRoaXMuY29tcG9uZW50KClcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKC4uLihhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLmJlbmNoQXJndW1lbnRzJykgfHwgW10pKVxuICAgIHJldHVybiB0aGlzLnJ1bkJ1aWxkKClcbiAgfVxuICBwdWJsaWMgYXN5bmMgY2xlYW4oKSB7XG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaCgnY2xlYW4nKVxuICAgIHRoaXMuY29tcG9uZW50KClcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKC4uLihhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLmNsZWFuQXJndW1lbnRzJykgfHwgW10pKVxuICAgIHJldHVybiB0aGlzLnJ1bkNhYmFsKClcbiAgfVxuICBwdWJsaWMgYXN5bmMgZGVwcygpIHtcbiAgICB0aGlzLmNhYmFsQXJncy5wdXNoKCdidWlsZCcsICctLW9ubHktZGVwZW5kZW5jaWVzJylcbiAgICB0aGlzLmNvbXBvbmVudCgpXG4gICAgdGhpcy5jYWJhbEFyZ3MucHVzaCguLi4oYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay5kZXBzQXJndW1lbnRzJykgfHwgW10pKVxuICAgIHJldHVybiB0aGlzLnJ1bkNhYmFsKClcbiAgfVxuXG4gIHByaXZhdGUgY29tcG9uZW50KCkge1xuICAgIGxldCBjb21wID0gKHRoaXMub3B0cy50YXJnZXQudGFyZ2V0ICYmIHRoaXMub3B0cy50YXJnZXQudGFyZ2V0LnRhcmdldClcbiAgICAgICAgICAgICAgfHwgdGhpcy5vcHRzLnRhcmdldC5jb21wb25lbnRcbiAgICBpZiAoY29tcCkge1xuICAgICAgaWYgKGNvbXAuc3RhcnRzV2l0aCgnbGliOicpKSB7IGNvbXAgPSAnbGliJyB9XG4gICAgICBjb21wID0gYCR7dGhpcy5vcHRzLnRhcmdldC5wcm9qZWN0fToke2NvbXB9YFxuICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaChjb21wKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcnVuQnVpbGQoKSB7XG4gICAgY29uc3Qgb2xkU2V2ZXJpdHkgPSB0aGlzLm9wdHMub3B0cy5zZXZlcml0eVxuICAgIHRoaXMub3B0cy5vcHRzLnNldmVyaXR5ID0gJ2J1aWxkJ1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucnVuQ2FiYWwoWyctLW5vLXJ1bi10ZXN0cycsICctLW5vLXJ1bi1iZW5jaG1hcmtzJ10pXG4gICAgdGhpcy5vcHRzLm9wdHMuc2V2ZXJpdHkgPSBvbGRTZXZlcml0eVxuICAgIGlmIChyZXMuZXhpdENvZGUgIT09IDApIHtcbiAgICAgIHJldHVybiByZXNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucnVuQ2FiYWwoKVxuICAgIH1cbiAgfVxufVxuIl19