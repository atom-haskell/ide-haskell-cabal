"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cabal_1 = require("./base/cabal");
const process_1 = require("./base/process");
class Builder extends cabal_1.CabalBase {
    constructor(opts) {
        super(opts);
    }
    async build() {
        return this.commonBuild('build', this.component());
    }
    async test() {
        const severityChangeRx = {};
        severityChangeRx[this.opts.params.severity] = /Running \d+ test suites\.\.\./;
        return this.commonBuild('test', [], { severityChangeRx, severity: 'build' });
    }
    async bench() {
        const severityChangeRx = {};
        severityChangeRx[this.opts.params.severity] = /Running \d+ benchmarks\.\.\./;
        return this.commonBuild('bench', [], {
            severityChangeRx,
            severity: 'build',
        });
    }
    async clean() {
        return this.commonBuild('clean', []);
    }
    async deps() {
        atom.notifications.addWarning("Command 'deps' is not implemented for cabal-v2");
        throw new Error("Command 'deps' is not implemented for cabal-v2");
    }
    component() {
        return super.component().map((x) => `${this.opts.target.project}:${x}`);
    }
    async withPrefix(cmd) {
        return super.withPrefix(cmd, { oldprefix: 'new-', newprefix: 'v2-' });
    }
    async commonBuild(command, args, override = {}) {
        if (atom.config.get('ide-haskell-cabal.cabal.runHpack')) {
            if (await this.opts.cabalRoot.getFile('package.yaml').exists()) {
                await process_1.runProcess('hpack', [], this.getSpawnOpts(), this.opts.params);
            }
        }
        return this.runCabal([
            await this.withPrefix(command),
            ...args,
            '--builddir=' + cabal_1.getCabalOpts().buildDir,
        ], override);
    }
}
exports.Builder = Builder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwtdjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRlcnMvY2FiYWwtdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx3Q0FBc0Q7QUFDdEQsNENBQTJDO0FBRTNDLE1BQWEsT0FBUSxTQUFRLGlCQUFTO0lBQ3BDLFlBQVksSUFBYztRQUN4QixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDYixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUs7UUFDaEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQTtJQUNwRCxDQUFDO0lBQ00sS0FBSyxDQUFDLElBQUk7UUFDZixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQTtRQUMzQixnQkFBZ0IsQ0FDZCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQzFCLEdBQUcsK0JBQStCLENBQUE7UUFDbkMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQTtJQUM5RSxDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQUs7UUFDaEIsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUE7UUFDM0IsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsOEJBQThCLENBQUE7UUFDNUUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUU7WUFDbkMsZ0JBQWdCO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FBQTtJQUNKLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBSztRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3RDLENBQUM7SUFDTSxLQUFLLENBQUMsSUFBSTtRQUNmLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUMzQixnREFBZ0QsQ0FDakQsQ0FBQTtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQTtJQUNuRSxDQUFDO0lBRVMsU0FBUztRQUNqQixPQUFPLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDekUsQ0FBQztJQUNTLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBVztRQUNwQyxPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUN2RSxDQUFDO0lBQ08sS0FBSyxDQUFDLFdBQVcsQ0FDdkIsT0FBeUQsRUFDekQsSUFBYyxFQUNkLFdBQTZCLEVBQUU7UUFFL0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxFQUFFO1lBQ3ZELElBQUksTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzlELE1BQU0sb0JBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2FBQ3JFO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQ2xCO1lBQ0UsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztZQUM5QixHQUFHLElBQUk7WUFDUCxhQUFhLEdBQUcsb0JBQVksRUFBRSxDQUFDLFFBQVE7U0FDeEMsRUFDRCxRQUFRLENBQ1QsQ0FBQTtJQUNILENBQUM7Q0FDRjtBQTFERCwwQkEwREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdG9yT3B0cywgUmVzdWx0VHlwZSwgSVBhcmFtcyB9IGZyb20gJy4vYmFzZSdcbmltcG9ydCB7IENhYmFsQmFzZSwgZ2V0Q2FiYWxPcHRzIH0gZnJvbSAnLi9iYXNlL2NhYmFsJ1xuaW1wb3J0IHsgcnVuUHJvY2VzcyB9IGZyb20gJy4vYmFzZS9wcm9jZXNzJ1xuXG5leHBvcnQgY2xhc3MgQnVpbGRlciBleHRlbmRzIENhYmFsQmFzZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHM6IEN0b3JPcHRzKSB7XG4gICAgc3VwZXIob3B0cylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBidWlsZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21tb25CdWlsZCgnYnVpbGQnLCB0aGlzLmNvbXBvbmVudCgpKVxuICB9XG4gIHB1YmxpYyBhc3luYyB0ZXN0KCkge1xuICAgIGNvbnN0IHNldmVyaXR5Q2hhbmdlUnggPSB7fVxuICAgIHNldmVyaXR5Q2hhbmdlUnhbXG4gICAgICB0aGlzLm9wdHMucGFyYW1zLnNldmVyaXR5XG4gICAgXSA9IC9SdW5uaW5nIFxcZCsgdGVzdCBzdWl0ZXNcXC5cXC5cXC4vXG4gICAgcmV0dXJuIHRoaXMuY29tbW9uQnVpbGQoJ3Rlc3QnLCBbXSwgeyBzZXZlcml0eUNoYW5nZVJ4LCBzZXZlcml0eTogJ2J1aWxkJyB9KVxuICB9XG4gIHB1YmxpYyBhc3luYyBiZW5jaCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICBjb25zdCBzZXZlcml0eUNoYW5nZVJ4ID0ge31cbiAgICBzZXZlcml0eUNoYW5nZVJ4W3RoaXMub3B0cy5wYXJhbXMuc2V2ZXJpdHldID0gL1J1bm5pbmcgXFxkKyBiZW5jaG1hcmtzXFwuXFwuXFwuL1xuICAgIHJldHVybiB0aGlzLmNvbW1vbkJ1aWxkKCdiZW5jaCcsIFtdLCB7XG4gICAgICBzZXZlcml0eUNoYW5nZVJ4LFxuICAgICAgc2V2ZXJpdHk6ICdidWlsZCcsXG4gICAgfSlcbiAgfVxuICBwdWJsaWMgYXN5bmMgY2xlYW4oKTogUHJvbWlzZTxSZXN1bHRUeXBlPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tbW9uQnVpbGQoJ2NsZWFuJywgW10pXG4gIH1cbiAgcHVibGljIGFzeW5jIGRlcHMoKTogUHJvbWlzZTxSZXN1bHRUeXBlPiB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoXG4gICAgICBcIkNvbW1hbmQgJ2RlcHMnIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgY2FiYWwtdjJcIixcbiAgICApXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWFuZCAnZGVwcycgaXMgbm90IGltcGxlbWVudGVkIGZvciBjYWJhbC12MlwiKVxuICB9XG4gIC8vIG92ZXJyaWRlcyBDYWJhbEJhc2UuY29tcG9uZW50KClcbiAgcHJvdGVjdGVkIGNvbXBvbmVudCgpIHtcbiAgICByZXR1cm4gc3VwZXIuY29tcG9uZW50KCkubWFwKCh4KSA9PiBgJHt0aGlzLm9wdHMudGFyZ2V0LnByb2plY3R9OiR7eH1gKVxuICB9XG4gIHByb3RlY3RlZCBhc3luYyB3aXRoUHJlZml4KGNtZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN1cGVyLndpdGhQcmVmaXgoY21kLCB7IG9sZHByZWZpeDogJ25ldy0nLCBuZXdwcmVmaXg6ICd2Mi0nIH0pXG4gIH1cbiAgcHJpdmF0ZSBhc3luYyBjb21tb25CdWlsZChcbiAgICBjb21tYW5kOiAnYnVpbGQnIHwgJ3Rlc3QnIHwgJ2JlbmNoJyB8ICdpbnN0YWxsJyB8ICdjbGVhbicsXG4gICAgYXJnczogc3RyaW5nW10sXG4gICAgb3ZlcnJpZGU6IFBhcnRpYWw8SVBhcmFtcz4gPSB7fSxcbiAgKSB7XG4gICAgaWYgKGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwucnVuSHBhY2snKSkge1xuICAgICAgaWYgKGF3YWl0IHRoaXMub3B0cy5jYWJhbFJvb3QuZ2V0RmlsZSgncGFja2FnZS55YW1sJykuZXhpc3RzKCkpIHtcbiAgICAgICAgYXdhaXQgcnVuUHJvY2VzcygnaHBhY2snLCBbXSwgdGhpcy5nZXRTcGF3bk9wdHMoKSwgdGhpcy5vcHRzLnBhcmFtcylcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucnVuQ2FiYWwoXG4gICAgICBbXG4gICAgICAgIGF3YWl0IHRoaXMud2l0aFByZWZpeChjb21tYW5kKSxcbiAgICAgICAgLi4uYXJncyxcbiAgICAgICAgJy0tYnVpbGRkaXI9JyArIGdldENhYmFsT3B0cygpLmJ1aWxkRGlyLFxuICAgICAgXSxcbiAgICAgIG92ZXJyaWRlLFxuICAgIClcbiAgfVxufVxuIl19