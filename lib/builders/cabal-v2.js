"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cabal_1 = require("./base/cabal");
class Builder extends cabal_1.CabalBase {
    constructor(opts) {
        super(opts);
    }
    async build() {
        return this.commonBuild('build', this.component());
    }
    async test() {
        const severityChangeRx = {};
        severityChangeRx[this.opts.opts.severity] = /Running \d+ test suites\.\.\./;
        return this.commonBuild('test', [], { severityChangeRx, severity: 'build' });
    }
    async bench() {
        const severityChangeRx = {};
        severityChangeRx[this.opts.opts.severity] = /Running \d+ benchmarks\.\.\./;
        return this.commonBuild('bench', [], {
            severityChangeRx,
            severity: 'build',
        });
    }
    async clean() {
        return this.commonBuild('clean', []);
    }
    async deps() {
        atom.notifications.addWarning("Command 'deps' is not implemented for cabal-v2");
        throw new Error("Command 'deps' is not implemented for cabal-v2");
    }
    async commonBuild(command, args, override = {}) {
        return this.runCabal([
            await this.withPrefix(command),
            ...args,
            '--builddir=' + cabal_1.getCabalOpts().buildDir,
        ], override);
    }
    async withPrefix(cmd) {
        const version = (await this.versionPromise).split('.');
        const major = parseInt(version[0], 10);
        const minor = parseInt(version[1], 10);
        if (major > 2 || (major == 2 && minor >= 4)) {
            return `v2-${cmd}`;
        }
        else {
            return `new-${cmd}`;
        }
    }
}
exports.Builder = Builder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwtdjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRlcnMvY2FiYWwtdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx3Q0FBc0Q7QUFFdEQsTUFBYSxPQUFRLFNBQVEsaUJBQVM7SUFJcEMsWUFBWSxJQUFjO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNiLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSztRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFDTSxLQUFLLENBQUMsSUFBSTtRQUNmLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO1FBQzNCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLCtCQUErQixDQUFBO1FBQzNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7SUFDOUUsQ0FBQztJQUNNLEtBQUssQ0FBQyxLQUFLO1FBQ2hCLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO1FBQzNCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLDhCQUE4QixDQUFBO1FBQzFFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFO1lBQ25DLGdCQUFnQjtZQUNoQixRQUFRLEVBQUUsT0FBTztTQUNsQixDQUFDLENBQUE7SUFDSixDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQUs7UUFDaEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBQ00sS0FBSyxDQUFDLElBQUk7UUFDZixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FDM0IsZ0RBQWdELENBQ2pELENBQUE7UUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUE7SUFDbkUsQ0FBQztJQUNPLEtBQUssQ0FBQyxXQUFXLENBQ3ZCLE9BQXlELEVBQ3pELElBQWMsRUFDZCxXQUE2QixFQUFFO1FBRS9CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FDbEI7WUFDRSxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO1lBQzlCLEdBQUcsSUFBSTtZQUNQLGFBQWEsR0FBRyxvQkFBWSxFQUFFLENBQUMsUUFBUTtTQUN4QyxFQUNELFFBQVEsQ0FDVCxDQUFBO0lBQ0gsQ0FBQztJQUNPLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBVztRQUNsQyxNQUFNLE9BQU8sR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN0RCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ3RDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFDdEMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDM0MsT0FBTyxNQUFNLEdBQUcsRUFBRSxDQUFBO1NBQ25CO2FBQU07WUFDTCxPQUFPLE9BQU8sR0FBRyxFQUFFLENBQUE7U0FDcEI7SUFDSCxDQUFDO0NBQ0Y7QUF6REQsMEJBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ3Rvck9wdHMsIFJlc3VsdFR5cGUsIElQYXJhbXMgfSBmcm9tICcuL2Jhc2UnXG5pbXBvcnQgeyBDYWJhbEJhc2UsIGdldENhYmFsT3B0cyB9IGZyb20gJy4vYmFzZS9jYWJhbCdcblxuZXhwb3J0IGNsYXNzIEJ1aWxkZXIgZXh0ZW5kcyBDYWJhbEJhc2Uge1xuICAvLyBUT0RPOlxuICAvLyAgICogQ29tbWFuZHMgb3RoZXIgdGhhbiAnYnVpbGQnXG4gIC8vICAgKiBTdXBwb3J0IGZvciBidWlsZERpclxuICBjb25zdHJ1Y3RvcihvcHRzOiBDdG9yT3B0cykge1xuICAgIHN1cGVyKG9wdHMpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgYnVpbGQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tbW9uQnVpbGQoJ2J1aWxkJywgdGhpcy5jb21wb25lbnQoKSlcbiAgfVxuICBwdWJsaWMgYXN5bmMgdGVzdCgpIHtcbiAgICBjb25zdCBzZXZlcml0eUNoYW5nZVJ4ID0ge31cbiAgICBzZXZlcml0eUNoYW5nZVJ4W3RoaXMub3B0cy5vcHRzLnNldmVyaXR5XSA9IC9SdW5uaW5nIFxcZCsgdGVzdCBzdWl0ZXNcXC5cXC5cXC4vXG4gICAgcmV0dXJuIHRoaXMuY29tbW9uQnVpbGQoJ3Rlc3QnLCBbXSwgeyBzZXZlcml0eUNoYW5nZVJ4LCBzZXZlcml0eTogJ2J1aWxkJyB9KVxuICB9XG4gIHB1YmxpYyBhc3luYyBiZW5jaCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICBjb25zdCBzZXZlcml0eUNoYW5nZVJ4ID0ge31cbiAgICBzZXZlcml0eUNoYW5nZVJ4W3RoaXMub3B0cy5vcHRzLnNldmVyaXR5XSA9IC9SdW5uaW5nIFxcZCsgYmVuY2htYXJrc1xcLlxcLlxcLi9cbiAgICByZXR1cm4gdGhpcy5jb21tb25CdWlsZCgnYmVuY2gnLCBbXSwge1xuICAgICAgc2V2ZXJpdHlDaGFuZ2VSeCxcbiAgICAgIHNldmVyaXR5OiAnYnVpbGQnLFxuICAgIH0pXG4gIH1cbiAgcHVibGljIGFzeW5jIGNsZWFuKCk6IFByb21pc2U8UmVzdWx0VHlwZT4ge1xuICAgIHJldHVybiB0aGlzLmNvbW1vbkJ1aWxkKCdjbGVhbicsIFtdKVxuICB9XG4gIHB1YmxpYyBhc3luYyBkZXBzKCk6IFByb21pc2U8UmVzdWx0VHlwZT4ge1xuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKFxuICAgICAgXCJDb21tYW5kICdkZXBzJyBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIGNhYmFsLXYyXCIsXG4gICAgKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkNvbW1hbmQgJ2RlcHMnIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgY2FiYWwtdjJcIilcbiAgfVxuICBwcml2YXRlIGFzeW5jIGNvbW1vbkJ1aWxkKFxuICAgIGNvbW1hbmQ6ICdidWlsZCcgfCAndGVzdCcgfCAnYmVuY2gnIHwgJ2luc3RhbGwnIHwgJ2NsZWFuJyxcbiAgICBhcmdzOiBzdHJpbmdbXSxcbiAgICBvdmVycmlkZTogUGFydGlhbDxJUGFyYW1zPiA9IHt9LFxuICApIHtcbiAgICByZXR1cm4gdGhpcy5ydW5DYWJhbChcbiAgICAgIFtcbiAgICAgICAgYXdhaXQgdGhpcy53aXRoUHJlZml4KGNvbW1hbmQpLFxuICAgICAgICAuLi5hcmdzLFxuICAgICAgICAnLS1idWlsZGRpcj0nICsgZ2V0Q2FiYWxPcHRzKCkuYnVpbGREaXIsXG4gICAgICBdLFxuICAgICAgb3ZlcnJpZGUsXG4gICAgKVxuICB9XG4gIHByaXZhdGUgYXN5bmMgd2l0aFByZWZpeChjbWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHZlcnNpb24gPSAoYXdhaXQgdGhpcy52ZXJzaW9uUHJvbWlzZSkuc3BsaXQoJy4nKVxuICAgIGNvbnN0IG1ham9yID0gcGFyc2VJbnQodmVyc2lvblswXSwgMTApXG4gICAgY29uc3QgbWlub3IgPSBwYXJzZUludCh2ZXJzaW9uWzFdLCAxMClcbiAgICBpZiAobWFqb3IgPiAyIHx8IChtYWpvciA9PSAyICYmIG1pbm9yID49IDQpKSB7XG4gICAgICByZXR1cm4gYHYyLSR7Y21kfWBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBuZXctJHtjbWR9YFxuICAgIH1cbiAgfVxufVxuIl19