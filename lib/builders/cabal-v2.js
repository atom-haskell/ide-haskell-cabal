"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cabal_1 = require("./base/cabal");
class Builder extends cabal_1.CabalBase {
    constructor(opts) {
        super(opts);
    }
    async build() {
        return this.commonBuild('build', this.component());
    }
    async test() {
        const severityChangeRx = {};
        severityChangeRx[this.opts.params.severity] = /Running \d+ test suites\.\.\./;
        return this.commonBuild('test', [], { severityChangeRx, severity: 'build' });
    }
    async bench() {
        const severityChangeRx = {};
        severityChangeRx[this.opts.params.severity] = /Running \d+ benchmarks\.\.\./;
        return this.commonBuild('bench', [], {
            severityChangeRx,
            severity: 'build',
        });
    }
    async clean() {
        return this.commonBuild('clean', []);
    }
    async deps() {
        atom.notifications.addWarning("Command 'deps' is not implemented for cabal-v2");
        throw new Error("Command 'deps' is not implemented for cabal-v2");
    }
    async commonBuild(command, args, override = {}) {
        return this.runCabal([
            await this.withPrefix(command),
            ...args,
            '--builddir=' + cabal_1.getCabalOpts().buildDir,
        ], override);
    }
    component() {
        return super.component().map((x) => `${this.opts.target.project}:${x}`);
    }
    async withPrefix(cmd) {
        return super.withPrefix(cmd, { oldprefix: 'new-', newprefix: 'v2-' });
    }
}
exports.Builder = Builder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwtdjIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRlcnMvY2FiYWwtdjIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSx3Q0FBc0Q7QUFFdEQsTUFBYSxPQUFRLFNBQVEsaUJBQVM7SUFDcEMsWUFBWSxJQUFjO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNiLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSztRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO0lBQ3BELENBQUM7SUFDTSxLQUFLLENBQUMsSUFBSTtRQUNmLE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFBO1FBQzNCLGdCQUFnQixDQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FDMUIsR0FBRywrQkFBK0IsQ0FBQTtRQUNuQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFBO0lBQzlFLENBQUM7SUFDTSxLQUFLLENBQUMsS0FBSztRQUNoQixNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQTtRQUMzQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyw4QkFBOEIsQ0FBQTtRQUM1RSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsRUFBRTtZQUNuQyxnQkFBZ0I7WUFDaEIsUUFBUSxFQUFFLE9BQU87U0FDbEIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUNNLEtBQUssQ0FBQyxLQUFLO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUNNLEtBQUssQ0FBQyxJQUFJO1FBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQzNCLGdEQUFnRCxDQUNqRCxDQUFBO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFBO0lBQ25FLENBQUM7SUFDTyxLQUFLLENBQUMsV0FBVyxDQUN2QixPQUF5RCxFQUN6RCxJQUFjLEVBQ2QsV0FBNkIsRUFBRTtRQUUvQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQ2xCO1lBQ0UsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztZQUM5QixHQUFHLElBQUk7WUFDUCxhQUFhLEdBQUcsb0JBQVksRUFBRSxDQUFDLFFBQVE7U0FDeEMsRUFDRCxRQUFRLENBQ1QsQ0FBQTtJQUNILENBQUM7SUFFUyxTQUFTO1FBQ2pCLE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUN6RSxDQUFDO0lBQ1MsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFBO0lBQ3ZFLENBQUM7Q0FDRjtBQXJERCwwQkFxREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdG9yT3B0cywgUmVzdWx0VHlwZSwgSVBhcmFtcyB9IGZyb20gJy4vYmFzZSdcbmltcG9ydCB7IENhYmFsQmFzZSwgZ2V0Q2FiYWxPcHRzIH0gZnJvbSAnLi9iYXNlL2NhYmFsJ1xuXG5leHBvcnQgY2xhc3MgQnVpbGRlciBleHRlbmRzIENhYmFsQmFzZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHM6IEN0b3JPcHRzKSB7XG4gICAgc3VwZXIob3B0cylcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBidWlsZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb21tb25CdWlsZCgnYnVpbGQnLCB0aGlzLmNvbXBvbmVudCgpKVxuICB9XG4gIHB1YmxpYyBhc3luYyB0ZXN0KCkge1xuICAgIGNvbnN0IHNldmVyaXR5Q2hhbmdlUnggPSB7fVxuICAgIHNldmVyaXR5Q2hhbmdlUnhbXG4gICAgICB0aGlzLm9wdHMucGFyYW1zLnNldmVyaXR5XG4gICAgXSA9IC9SdW5uaW5nIFxcZCsgdGVzdCBzdWl0ZXNcXC5cXC5cXC4vXG4gICAgcmV0dXJuIHRoaXMuY29tbW9uQnVpbGQoJ3Rlc3QnLCBbXSwgeyBzZXZlcml0eUNoYW5nZVJ4LCBzZXZlcml0eTogJ2J1aWxkJyB9KVxuICB9XG4gIHB1YmxpYyBhc3luYyBiZW5jaCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICBjb25zdCBzZXZlcml0eUNoYW5nZVJ4ID0ge31cbiAgICBzZXZlcml0eUNoYW5nZVJ4W3RoaXMub3B0cy5wYXJhbXMuc2V2ZXJpdHldID0gL1J1bm5pbmcgXFxkKyBiZW5jaG1hcmtzXFwuXFwuXFwuL1xuICAgIHJldHVybiB0aGlzLmNvbW1vbkJ1aWxkKCdiZW5jaCcsIFtdLCB7XG4gICAgICBzZXZlcml0eUNoYW5nZVJ4LFxuICAgICAgc2V2ZXJpdHk6ICdidWlsZCcsXG4gICAgfSlcbiAgfVxuICBwdWJsaWMgYXN5bmMgY2xlYW4oKTogUHJvbWlzZTxSZXN1bHRUeXBlPiB7XG4gICAgcmV0dXJuIHRoaXMuY29tbW9uQnVpbGQoJ2NsZWFuJywgW10pXG4gIH1cbiAgcHVibGljIGFzeW5jIGRlcHMoKTogUHJvbWlzZTxSZXN1bHRUeXBlPiB7XG4gICAgYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcoXG4gICAgICBcIkNvbW1hbmQgJ2RlcHMnIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgY2FiYWwtdjJcIixcbiAgICApXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWFuZCAnZGVwcycgaXMgbm90IGltcGxlbWVudGVkIGZvciBjYWJhbC12MlwiKVxuICB9XG4gIHByaXZhdGUgYXN5bmMgY29tbW9uQnVpbGQoXG4gICAgY29tbWFuZDogJ2J1aWxkJyB8ICd0ZXN0JyB8ICdiZW5jaCcgfCAnaW5zdGFsbCcgfCAnY2xlYW4nLFxuICAgIGFyZ3M6IHN0cmluZ1tdLFxuICAgIG92ZXJyaWRlOiBQYXJ0aWFsPElQYXJhbXM+ID0ge30sXG4gICkge1xuICAgIHJldHVybiB0aGlzLnJ1bkNhYmFsKFxuICAgICAgW1xuICAgICAgICBhd2FpdCB0aGlzLndpdGhQcmVmaXgoY29tbWFuZCksXG4gICAgICAgIC4uLmFyZ3MsXG4gICAgICAgICctLWJ1aWxkZGlyPScgKyBnZXRDYWJhbE9wdHMoKS5idWlsZERpcixcbiAgICAgIF0sXG4gICAgICBvdmVycmlkZSxcbiAgICApXG4gIH1cbiAgLy8gb3ZlcnJpZGVzIENhYmFsQmFzZS5jb21wb25lbnQoKVxuICBwcm90ZWN0ZWQgY29tcG9uZW50KCkge1xuICAgIHJldHVybiBzdXBlci5jb21wb25lbnQoKS5tYXAoKHgpID0+IGAke3RoaXMub3B0cy50YXJnZXQucHJvamVjdH06JHt4fWApXG4gIH1cbiAgcHJvdGVjdGVkIGFzeW5jIHdpdGhQcmVmaXgoY21kOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3VwZXIud2l0aFByZWZpeChjbWQsIHsgb2xkcHJlZml4OiAnbmV3LScsIG5ld3ByZWZpeDogJ3YyLScgfSlcbiAgfVxufVxuIl19