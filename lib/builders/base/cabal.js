"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const path_1 = require("path");
class CabalBase extends index_1.BuilderBase {
    constructor(opts) {
        super('cabal', opts);
    }
    additionalEnvSetup(env) {
        const opts = getCabalOpts();
        const ghcPath = opts.pathTo;
        if (opts.pathExclusive) {
            env.PATH = ghcPath.join(path_1.delimiter);
        }
        else if (ghcPath.length > 0) {
            env.PATH = ghcPath
                .concat((env.PATH || '').split(path_1.delimiter))
                .join(path_1.delimiter);
        }
        return env;
    }
    component() {
        switch (this.opts.target.type) {
            case 'all':
                this.cabalArgs.push(...this.opts.target.targets.map((x) => x.target));
                break;
            case 'component':
                this.cabalArgs.push(this.opts.target.component);
                break;
            case 'auto':
                break;
        }
    }
}
exports.CabalBase = CabalBase;
function getCabalOpts() {
    const vers = atom.config.get('ide-haskell-cabal.cabal.activeGhcVersion');
    const [maj, min] = vers.split('.');
    const key = `ide-haskell-cabal.cabal.ghc${maj}${min.length === 1 ? `0${min}` : min}`;
    return atom.config.get(key);
}
exports.getCabalOpts = getCabalOpts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9jYWJhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUErQztBQUMvQywrQkFBZ0M7QUFLaEMsZUFBZ0MsU0FBUSxtQkFBVztJQUNqRCxZQUFZLElBQWM7UUFDeEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUN0QixDQUFDO0lBRVMsa0JBQWtCLENBQUMsR0FBdUI7UUFDbEQsTUFBTSxJQUFJLEdBQUcsWUFBWSxFQUFFLENBQUE7UUFDM0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQTtRQUMzQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN2QixHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1FBQ3BDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTztpQkFDZixNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBUyxDQUFDLENBQUM7aUJBQ3pDLElBQUksQ0FBQyxnQkFBUyxDQUFDLENBQUE7UUFDcEIsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRVMsU0FBUztRQUNqQixNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO2dCQUNyRSxLQUFLLENBQUE7WUFDUCxLQUFLLFdBQVc7Z0JBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUE7Z0JBQy9DLEtBQUssQ0FBQTtZQUNQLEtBQUssTUFBTTtnQkFDVCxLQUFLLENBQUE7UUFDVCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBL0JELDhCQStCQztBQUVEO0lBQ0UsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMENBQTBDLENBQUMsQ0FBQTtJQUN4RSxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDbEMsTUFBTSxHQUFHLEdBQUcsOEJBQThCLEdBQUcsR0FDM0MsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQ2pDLEVBQUUsQ0FBQTtJQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUM3QixDQUFDO0FBUEQsb0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdG9yT3B0cywgQnVpbGRlckJhc2UgfSBmcm9tICcuL2luZGV4J1xuaW1wb3J0IHsgZGVsaW1pdGVyIH0gZnJvbSAncGF0aCdcbmltcG9ydCB7IENvbmZpZ1ZhbHVlcyB9IGZyb20gJ2F0b20nXG5cbnR5cGUgR0hDVmVyUHJvcHMgPSBDb25maWdWYWx1ZXNbJ2lkZS1oYXNrZWxsLWNhYmFsJ11bJ2NhYmFsJ11bJ2doYzgwMCddXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYWJhbEJhc2UgZXh0ZW5kcyBCdWlsZGVyQmFzZSB7XG4gIGNvbnN0cnVjdG9yKG9wdHM6IEN0b3JPcHRzKSB7XG4gICAgc3VwZXIoJ2NhYmFsJywgb3B0cylcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRpdGlvbmFsRW52U2V0dXAoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpIHtcbiAgICBjb25zdCBvcHRzID0gZ2V0Q2FiYWxPcHRzKClcbiAgICBjb25zdCBnaGNQYXRoID0gb3B0cy5wYXRoVG9cbiAgICBpZiAob3B0cy5wYXRoRXhjbHVzaXZlKSB7XG4gICAgICBlbnYuUEFUSCA9IGdoY1BhdGguam9pbihkZWxpbWl0ZXIpXG4gICAgfSBlbHNlIGlmIChnaGNQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgIGVudi5QQVRIID0gZ2hjUGF0aFxuICAgICAgICAuY29uY2F0KChlbnYuUEFUSCB8fCAnJykuc3BsaXQoZGVsaW1pdGVyKSlcbiAgICAgICAgLmpvaW4oZGVsaW1pdGVyKVxuICAgIH1cblxuICAgIHJldHVybiBlbnZcbiAgfVxuXG4gIHByb3RlY3RlZCBjb21wb25lbnQoKSB7XG4gICAgc3dpdGNoICh0aGlzLm9wdHMudGFyZ2V0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2FsbCc6XG4gICAgICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goLi4udGhpcy5vcHRzLnRhcmdldC50YXJnZXRzLm1hcCgoeCkgPT4geC50YXJnZXQpKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY29tcG9uZW50JzpcbiAgICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaCh0aGlzLm9wdHMudGFyZ2V0LmNvbXBvbmVudClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FiYWxPcHRzKCk6IEdIQ1ZlclByb3BzIHtcbiAgY29uc3QgdmVycyA9IGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuYWN0aXZlR2hjVmVyc2lvbicpXG4gIGNvbnN0IFttYWosIG1pbl0gPSB2ZXJzLnNwbGl0KCcuJylcbiAgY29uc3Qga2V5ID0gYGlkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYyR7bWFqfSR7XG4gICAgbWluLmxlbmd0aCA9PT0gMSA/IGAwJHttaW59YCA6IG1pblxuICB9YFxuICByZXR1cm4gYXRvbS5jb25maWcuZ2V0KGtleSlcbn1cbiJdfQ==