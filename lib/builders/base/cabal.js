"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const path_1 = require("path");
class CabalBase extends index_1.BuilderBase {
    constructor(opts) {
        super('cabal', opts);
        const map = {
            '7.2': atom.config.get('ide-haskell-cabal.cabal.ghc702'),
            '7.4': atom.config.get('ide-haskell-cabal.cabal.ghc704'),
            '7.6': atom.config.get('ide-haskell-cabal.cabal.ghc706'),
            '7.8': atom.config.get('ide-haskell-cabal.cabal.ghc708'),
            '7.10': atom.config.get('ide-haskell-cabal.cabal.ghc710'),
            '8.0': atom.config.get('ide-haskell-cabal.cabal.ghc800'),
            '8.2': atom.config.get('ide-haskell-cabal.cabal.ghc802'),
        };
        this.cabalOpts =
            map[atom.config.get('ide-haskell-cabal.cabal.activeGhcVersion')];
    }
    additionalEnvSetup(env) {
        const opts = this.cabalOpts;
        const ghcPath = opts.pathTo;
        if (opts.pathExclusive) {
            env.PATH = ghcPath.join(path_1.delimiter);
        }
        else if (ghcPath.length > 0) {
            env.PATH = ghcPath
                .concat((env.PATH || '').split(path_1.delimiter))
                .join(path_1.delimiter);
        }
        return env;
    }
    component() {
        switch (this.opts.target.type) {
            case 'all':
                this.cabalArgs.push(...this.opts.target.targets.map((x) => x.target));
                break;
            case 'component':
                this.cabalArgs.push(this.opts.target.component);
                break;
            case 'auto':
                break;
        }
    }
}
exports.CabalBase = CabalBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9jYWJhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUErQztBQUMvQywrQkFBZ0M7QUFFaEMsZUFBZ0MsU0FBUSxtQkFBVztJQUVqRCxZQUFZLElBQWM7UUFDeEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUNwQixNQUFNLEdBQUcsR0FBRztZQUNWLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQztZQUN4RCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUM7WUFDeEQsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDO1lBQ3hELEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQztZQUN4RCxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUM7WUFDekQsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDO1lBQ3hELEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQztTQUN6RCxDQUFBO1FBQ0QsSUFBSSxDQUFDLFNBQVM7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFBO0lBQ3BFLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxHQUF1QjtRQUNsRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQzNCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDM0IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDdkIsR0FBRyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFTLENBQUMsQ0FBQTtRQUNwQyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU87aUJBQ2YsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQVMsQ0FBQyxDQUFDO2lCQUN6QyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1FBQ3BCLENBQUM7UUFFRCxNQUFNLENBQUMsR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUVTLFNBQVM7UUFDakIsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM5QixLQUFLLEtBQUs7Z0JBQ1IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtnQkFDckUsS0FBSyxDQUFBO1lBQ1AsS0FBSyxXQUFXO2dCQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFBO2dCQUMvQyxLQUFLLENBQUE7WUFDUCxLQUFLLE1BQU07Z0JBQ1QsS0FBSyxDQUFBO1FBQ1QsQ0FBQztJQUNILENBQUM7Q0FDRjtBQTNDRCw4QkEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdG9yT3B0cywgQnVpbGRlckJhc2UgfSBmcm9tICcuL2luZGV4J1xuaW1wb3J0IHsgZGVsaW1pdGVyIH0gZnJvbSAncGF0aCdcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhYmFsQmFzZSBleHRlbmRzIEJ1aWxkZXJCYXNlIHtcbiAgcHJvdGVjdGVkIGNhYmFsT3B0czogR0hDVmVyUHJvcHNcbiAgY29uc3RydWN0b3Iob3B0czogQ3Rvck9wdHMpIHtcbiAgICBzdXBlcignY2FiYWwnLCBvcHRzKVxuICAgIGNvbnN0IG1hcCA9IHtcbiAgICAgICc3LjInOiBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwMicpLFxuICAgICAgJzcuNCc6IGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzA0JyksXG4gICAgICAnNy42JzogYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDYnKSxcbiAgICAgICc3LjgnOiBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwOCcpLFxuICAgICAgJzcuMTAnOiBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcxMCcpLFxuICAgICAgJzguMCc6IGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODAwJyksXG4gICAgICAnOC4yJzogYXRvbS5jb25maWcuZ2V0KCdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDInKSxcbiAgICB9XG4gICAgdGhpcy5jYWJhbE9wdHMgPVxuICAgICAgbWFwW2F0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuYWN0aXZlR2hjVmVyc2lvbicpXVxuICB9XG5cbiAgcHJvdGVjdGVkIGFkZGl0aW9uYWxFbnZTZXR1cChlbnY6IHR5cGVvZiBwcm9jZXNzLmVudikge1xuICAgIGNvbnN0IG9wdHMgPSB0aGlzLmNhYmFsT3B0c1xuICAgIGNvbnN0IGdoY1BhdGggPSBvcHRzLnBhdGhUb1xuICAgIGlmIChvcHRzLnBhdGhFeGNsdXNpdmUpIHtcbiAgICAgIGVudi5QQVRIID0gZ2hjUGF0aC5qb2luKGRlbGltaXRlcilcbiAgICB9IGVsc2UgaWYgKGdoY1BhdGgubGVuZ3RoID4gMCkge1xuICAgICAgZW52LlBBVEggPSBnaGNQYXRoXG4gICAgICAgIC5jb25jYXQoKGVudi5QQVRIIHx8ICcnKS5zcGxpdChkZWxpbWl0ZXIpKVxuICAgICAgICAuam9pbihkZWxpbWl0ZXIpXG4gICAgfVxuXG4gICAgcmV0dXJuIGVudlxuICB9XG5cbiAgcHJvdGVjdGVkIGNvbXBvbmVudCgpIHtcbiAgICBzd2l0Y2ggKHRoaXMub3B0cy50YXJnZXQudHlwZSkge1xuICAgICAgY2FzZSAnYWxsJzpcbiAgICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaCguLi50aGlzLm9wdHMudGFyZ2V0LnRhcmdldHMubWFwKCh4KSA9PiB4LnRhcmdldCkpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdjb21wb25lbnQnOlxuICAgICAgICB0aGlzLmNhYmFsQXJncy5wdXNoKHRoaXMub3B0cy50YXJnZXQuY29tcG9uZW50KVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG4iXX0=