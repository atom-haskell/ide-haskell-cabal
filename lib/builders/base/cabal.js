"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const path_1 = require("path");
const child_process = require("child_process");
class CabalBase extends index_1.BuilderBase {
    constructor(opts, globals = {}) {
        super('cabal', opts, globals);
        this.versionPromise = this.getVersion();
    }
    additionalEnvSetup(env) {
        const opts = getCabalOpts();
        const ghcPath = opts.pathTo;
        if (opts.pathExclusive) {
            env.PATH = ghcPath.join(path_1.delimiter);
        }
        else if (ghcPath.length > 0) {
            env.PATH = ghcPath
                .concat((env.PATH || '').split(path_1.delimiter))
                .join(path_1.delimiter);
        }
        return env;
    }
    component() {
        switch (this.opts.target.type) {
            case 'all':
                return this.opts.target.targets.map((x) => x.target);
            case 'component':
                return [this.opts.target.component];
            case 'auto':
                return [];
        }
    }
    getVersion() {
        return new Promise((resolve, reject) => {
            child_process.execFile('cabal', ['--numeric-version'], this.spawnOpts, (error, stdout) => {
                if (error)
                    reject(error);
                else {
                    resolve(stdout);
                }
            });
        });
    }
}
exports.CabalBase = CabalBase;
function getCabalOpts() {
    const vers = atom.config.get('ide-haskell-cabal.cabal.activeGhcVersion');
    const [maj, min] = vers.split('.');
    const key = `ide-haskell-cabal.cabal.ghc${maj}${min.length === 1 ? `0${min}` : min}`;
    return atom.config.get(key);
}
exports.getCabalOpts = getCabalOpts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9jYWJhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUErQztBQUMvQywrQkFBZ0M7QUFFaEMsK0NBQStDO0FBSS9DLE1BQXNCLFNBQVUsU0FBUSxtQkFBVztJQUdqRCxZQUFZLElBQWMsRUFBRSxVQUFrQixFQUFFO1FBQzlDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQzdCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3pDLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxHQUF1QjtRQUNsRCxNQUFNLElBQUksR0FBRyxZQUFZLEVBQUUsQ0FBQTtRQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQzNCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1NBQ25DO2FBQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM3QixHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU87aUJBQ2YsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsZ0JBQVMsQ0FBQyxDQUFDO2lCQUN6QyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1NBQ25CO1FBRUQsT0FBTyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRVMsU0FBUztRQUNqQixRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRTtZQUM3QixLQUFLLEtBQUs7Z0JBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDdEQsS0FBSyxXQUFXO2dCQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUNyQyxLQUFLLE1BQU07Z0JBQ1QsT0FBTyxFQUFFLENBQUE7U0FDWjtJQUNILENBQUM7SUFFTyxVQUFVO1FBQ2hCLE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0MsYUFBYSxDQUFDLFFBQVEsQ0FDcEIsT0FBTyxFQUNQLENBQUMsbUJBQW1CLENBQUMsRUFDckIsSUFBSSxDQUFDLFNBQVMsRUFDZCxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtnQkFDaEIsSUFBSSxLQUFLO29CQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtxQkFDbkI7b0JBQ0gsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO2lCQUNoQjtZQUNILENBQUMsQ0FDRixDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUFoREQsOEJBZ0RDO0FBRUQsU0FBZ0IsWUFBWTtJQUMxQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFBO0lBQ3hFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQyxNQUFNLEdBQUcsR0FBRyw4QkFBOEIsR0FBRyxHQUMzQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FDakMsRUFBRSxDQUFBO0lBQ0YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUM3QixDQUFDO0FBUEQsb0NBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdG9yT3B0cywgQnVpbGRlckJhc2UgfSBmcm9tICcuL2luZGV4J1xuaW1wb3J0IHsgZGVsaW1pdGVyIH0gZnJvbSAncGF0aCdcbmltcG9ydCB7IENvbmZpZ1ZhbHVlcyB9IGZyb20gJ2F0b20nXG5pbXBvcnQgY2hpbGRfcHJvY2VzcyA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKVxuXG50eXBlIEdIQ1ZlclByb3BzID0gQ29uZmlnVmFsdWVzWydpZGUtaGFza2VsbC1jYWJhbCddWydjYWJhbCddWydnaGM4MDAnXVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FiYWxCYXNlIGV4dGVuZHMgQnVpbGRlckJhc2Uge1xuICBwcm90ZWN0ZWQgdmVyc2lvblByb21pc2U6IFByb21pc2U8c3RyaW5nPlxuXG4gIGNvbnN0cnVjdG9yKG9wdHM6IEN0b3JPcHRzLCBnbG9iYWxzOiBvYmplY3QgPSB7fSkge1xuICAgIHN1cGVyKCdjYWJhbCcsIG9wdHMsIGdsb2JhbHMpXG4gICAgdGhpcy52ZXJzaW9uUHJvbWlzZSA9IHRoaXMuZ2V0VmVyc2lvbigpXG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkaXRpb25hbEVudlNldHVwKGVudjogdHlwZW9mIHByb2Nlc3MuZW52KSB7XG4gICAgY29uc3Qgb3B0cyA9IGdldENhYmFsT3B0cygpXG4gICAgY29uc3QgZ2hjUGF0aCA9IG9wdHMucGF0aFRvXG4gICAgaWYgKG9wdHMucGF0aEV4Y2x1c2l2ZSkge1xuICAgICAgZW52LlBBVEggPSBnaGNQYXRoLmpvaW4oZGVsaW1pdGVyKVxuICAgIH0gZWxzZSBpZiAoZ2hjUGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICBlbnYuUEFUSCA9IGdoY1BhdGhcbiAgICAgICAgLmNvbmNhdCgoZW52LlBBVEggfHwgJycpLnNwbGl0KGRlbGltaXRlcikpXG4gICAgICAgIC5qb2luKGRlbGltaXRlcilcbiAgICB9XG5cbiAgICByZXR1cm4gZW52XG4gIH1cblxuICBwcm90ZWN0ZWQgY29tcG9uZW50KCkge1xuICAgIHN3aXRjaCAodGhpcy5vcHRzLnRhcmdldC50eXBlKSB7XG4gICAgICBjYXNlICdhbGwnOlxuICAgICAgICByZXR1cm4gdGhpcy5vcHRzLnRhcmdldC50YXJnZXRzLm1hcCgoeCkgPT4geC50YXJnZXQpXG4gICAgICBjYXNlICdjb21wb25lbnQnOlxuICAgICAgICByZXR1cm4gW3RoaXMub3B0cy50YXJnZXQuY29tcG9uZW50XVxuICAgICAgY2FzZSAnYXV0byc6XG4gICAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0VmVyc2lvbigpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjaGlsZF9wcm9jZXNzLmV4ZWNGaWxlKFxuICAgICAgICAnY2FiYWwnLFxuICAgICAgICBbJy0tbnVtZXJpYy12ZXJzaW9uJ10sXG4gICAgICAgIHRoaXMuc3Bhd25PcHRzLFxuICAgICAgICAoZXJyb3IsIHN0ZG91dCkgPT4ge1xuICAgICAgICAgIGlmIChlcnJvcikgcmVqZWN0KGVycm9yKVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShzdGRvdXQpXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgKVxuICAgIH0pXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhYmFsT3B0cygpOiBHSENWZXJQcm9wcyB7XG4gIGNvbnN0IHZlcnMgPSBhdG9tLmNvbmZpZy5nZXQoJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmFjdGl2ZUdoY1ZlcnNpb24nKVxuICBjb25zdCBbbWFqLCBtaW5dID0gdmVycy5zcGxpdCgnLicpXG4gIGNvbnN0IGtleSA9IGBpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGMke21han0ke1xuICAgIG1pbi5sZW5ndGggPT09IDEgPyBgMCR7bWlufWAgOiBtaW5cbiAgfWBcbiAgcmV0dXJuIGF0b20uY29uZmlnLmdldChrZXkpXG59XG4iXX0=