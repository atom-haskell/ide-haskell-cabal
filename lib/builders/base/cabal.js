"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const path_1 = require("path");
class CabalBase extends index_1.BuilderBase {
    constructor(opts, globals = {}) {
        super('cabal', opts, globals);
    }
    additionalEnvSetup(env) {
        const opts = getCabalOpts();
        const ghcPath = opts.pathTo;
        if (opts.pathExclusive) {
            env.PATH = ghcPath.join(path_1.delimiter);
        }
        else if (ghcPath.length > 0) {
            env.PATH = ghcPath
                .concat((env.PATH || '').split(path_1.delimiter))
                .join(path_1.delimiter);
        }
        return env;
    }
    component() {
        switch (this.opts.target.type) {
            case 'all':
                this.cabalArgs.push(...this.opts.target.targets.map((x) => x.target));
                break;
            case 'component':
                this.cabalArgs.push(this.opts.target.component);
                break;
            case 'auto':
                break;
        }
    }
}
exports.CabalBase = CabalBase;
function getCabalOpts() {
    const vers = atom.config.get('ide-haskell-cabal.cabal.activeGhcVersion');
    const [maj, min] = vers.split('.');
    const key = `ide-haskell-cabal.cabal.ghc${maj}${min.length === 1 ? `0${min}` : min}`;
    return atom.config.get(key);
}
exports.getCabalOpts = getCabalOpts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9jYWJhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUErQztBQUMvQywrQkFBZ0M7QUFLaEMsZUFBZ0MsU0FBUSxtQkFBVztJQUNqRCxZQUFZLElBQWMsRUFBRSxVQUFrQixFQUFFO1FBQzlDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxHQUF1QjtRQUNsRCxNQUFNLElBQUksR0FBRyxZQUFZLEVBQUUsQ0FBQTtRQUMzQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBO1FBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBUyxDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsR0FBRyxDQUFDLElBQUksR0FBRyxPQUFPO2lCQUNmLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLGdCQUFTLENBQUMsQ0FBQztpQkFDekMsSUFBSSxDQUFDLGdCQUFTLENBQUMsQ0FBQTtRQUNwQixDQUFDO1FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFUyxTQUFTO1FBQ2pCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDOUIsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7Z0JBQ3JFLEtBQUssQ0FBQTtZQUNQLEtBQUssV0FBVztnQkFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQTtnQkFDL0MsS0FBSyxDQUFBO1lBQ1AsS0FBSyxNQUFNO2dCQUNULEtBQUssQ0FBQTtRQUNULENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUEvQkQsOEJBK0JDO0FBRUQ7SUFDRSxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFBO0lBQ3hFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsQyxNQUFNLEdBQUcsR0FBRyw4QkFBOEIsR0FBRyxHQUMzQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FDakMsRUFBRSxDQUFBO0lBQ0YsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzdCLENBQUM7QUFQRCxvQ0FPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEN0b3JPcHRzLCBCdWlsZGVyQmFzZSB9IGZyb20gJy4vaW5kZXgnXG5pbXBvcnQgeyBkZWxpbWl0ZXIgfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgQ29uZmlnVmFsdWVzIH0gZnJvbSAnYXRvbSdcblxudHlwZSBHSENWZXJQcm9wcyA9IENvbmZpZ1ZhbHVlc1snaWRlLWhhc2tlbGwtY2FiYWwnXVsnY2FiYWwnXVsnZ2hjODAwJ11cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENhYmFsQmFzZSBleHRlbmRzIEJ1aWxkZXJCYXNlIHtcbiAgY29uc3RydWN0b3Iob3B0czogQ3Rvck9wdHMsIGdsb2JhbHM6IG9iamVjdCA9IHt9KSB7XG4gICAgc3VwZXIoJ2NhYmFsJywgb3B0cywgZ2xvYmFscylcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRpdGlvbmFsRW52U2V0dXAoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpIHtcbiAgICBjb25zdCBvcHRzID0gZ2V0Q2FiYWxPcHRzKClcbiAgICBjb25zdCBnaGNQYXRoID0gb3B0cy5wYXRoVG9cbiAgICBpZiAob3B0cy5wYXRoRXhjbHVzaXZlKSB7XG4gICAgICBlbnYuUEFUSCA9IGdoY1BhdGguam9pbihkZWxpbWl0ZXIpXG4gICAgfSBlbHNlIGlmIChnaGNQYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgIGVudi5QQVRIID0gZ2hjUGF0aFxuICAgICAgICAuY29uY2F0KChlbnYuUEFUSCB8fCAnJykuc3BsaXQoZGVsaW1pdGVyKSlcbiAgICAgICAgLmpvaW4oZGVsaW1pdGVyKVxuICAgIH1cblxuICAgIHJldHVybiBlbnZcbiAgfVxuXG4gIHByb3RlY3RlZCBjb21wb25lbnQoKSB7XG4gICAgc3dpdGNoICh0aGlzLm9wdHMudGFyZ2V0LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2FsbCc6XG4gICAgICAgIHRoaXMuY2FiYWxBcmdzLnB1c2goLi4udGhpcy5vcHRzLnRhcmdldC50YXJnZXRzLm1hcCgoeCkgPT4geC50YXJnZXQpKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnY29tcG9uZW50JzpcbiAgICAgICAgdGhpcy5jYWJhbEFyZ3MucHVzaCh0aGlzLm9wdHMudGFyZ2V0LmNvbXBvbmVudClcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ2F1dG8nOlxuICAgICAgICBicmVha1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FiYWxPcHRzKCk6IEdIQ1ZlclByb3BzIHtcbiAgY29uc3QgdmVycyA9IGF0b20uY29uZmlnLmdldCgnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuYWN0aXZlR2hjVmVyc2lvbicpXG4gIGNvbnN0IFttYWosIG1pbl0gPSB2ZXJzLnNwbGl0KCcuJylcbiAgY29uc3Qga2V5ID0gYGlkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYyR7bWFqfSR7XG4gICAgbWluLmxlbmd0aCA9PT0gMSA/IGAwJHttaW59YCA6IG1pblxuICB9YFxuICByZXR1cm4gYXRvbS5jb25maWcuZ2V0KGtleSlcbn1cbiJdfQ==