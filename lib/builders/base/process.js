"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const process_1 = require("process");
const path = require("path");
const os_1 = require("os");
const atom_1 = require("atom");
function unindentMessage(lines) {
    const minIndent = Math.min(...lines.map((line) => {
        const match = line.match(/^\s*/);
        if (match) {
            return match[0].length;
        }
        else {
            return 0;
        }
    }));
    return lines.map((line) => line.slice(minIndent)).join('\n');
}
function parseMessage(raw, cwd, defaultSeverity) {
    if (raw.trim() !== '') {
        const matchLoc = /^(.+):(\d+):(\d+):(?: (\w+):)?[ \t]*(\[[^\]]+\])?[ \t]*\n?([^]*)/;
        const matched = raw.trimRight().match(matchLoc);
        if (matched) {
            const [file, line, col, rawTyp, context, msg] = matched.slice(1);
            const typ = rawTyp ? rawTyp.toLowerCase() : 'error';
            return [
                true,
                {
                    uri: path.isAbsolute(file) ? file : cwd.getFile(file).getPath(),
                    position: new atom_1.Point(parseInt(line, 10) - 1, parseInt(col, 10) - 1),
                    context,
                    message: {
                        text: unindentMessage(msg.split('\n')),
                        highlighter: 'hint.message.haskell',
                    },
                    severity: typ,
                },
            ];
        }
        else {
            return [
                false,
                {
                    message: raw,
                    severity: defaultSeverity,
                },
            ];
        }
    }
    return [false, undefined];
}
function runBuilderProcess(command, args, options, params) {
    const cwd = new atom_1.Directory(options.cwd || '.');
    let hasError = false;
    let severity = params.severity;
    const proc = child_process.spawn(command, args, options);
    proc.on('error', function (err) {
        atom.notifications.addError(err.name, {
            detail: err.message,
            dismissable: true,
        });
    });
    const buffered = (handleOutput) => {
        let buffer = '';
        return (data) => {
            const output = data.toString('utf8');
            const [first, ...tail] = output.split(os_1.EOL);
            buffer += first;
            if (tail.length > 0) {
                const lines = [buffer, ...tail.slice(0, -1)];
                buffer = tail.slice(-1)[0];
                handleOutput(lines);
            }
        };
    };
    const blockBuffered = (handleOutput) => {
        const startOfMessage = /\n(?=\S)(?!\d+ \|)/g;
        let buffer = [];
        proc.on('close', () => handleOutput(buffer.join('\n')));
        return buffered((lines) => {
            buffer.push(...lines);
            const [first, ...tail] = buffer.join('\n').split(startOfMessage);
            if (tail.length > 0) {
                const last = tail.slice(-1)[0];
                buffer = last.split('\n');
                for (const block of [first, ...tail.slice(0, -1)]) {
                    handleOutput(block);
                }
            }
        });
    };
    if (params.setCancelAction) {
        params.setCancelAction(() => {
            try {
                process_1.kill(-proc.pid);
            }
            catch (e) {
            }
            try {
                process_1.kill(proc.pid);
            }
            catch (e) {
            }
            try {
                proc.kill();
            }
            catch (e) {
            }
        });
    }
    const handleMessage = (msg) => {
        if (params.onProgress) {
            const match = msg.match(/\[\s*([\d]+)\s+of\s+([\d]+)\s*\]/);
            if (match) {
                const progress = match[1];
                const total = match[2];
                params.onProgress(parseInt(progress, 10) / parseInt(total, 10));
            }
        }
        if (params.severityChangeRx) {
            for (const [sev, rx] of Object.entries(params.severityChangeRx)) {
                if (msg.match(rx)) {
                    severity = sev;
                    break;
                }
            }
        }
        let parsed;
        [hasError, parsed] = parseMessage(msg, cwd, severity);
        if (parsed && params.onMsg)
            params.onMsg(parsed);
    };
    proc.stdout.on('data', blockBuffered(handleMessage));
    proc.stderr.on('data', blockBuffered(handleMessage));
    proc.on('close', (exitCode) => {
        if (params.onDone) {
            params.onDone({ exitCode, hasError: hasError });
        }
    });
}
async function runProcess(command, args, options, pars) {
    let interval = undefined;
    try {
        interval = window.setInterval(() => process.activateUvLoop(), 100);
        return await new Promise((resolve) => {
            const newPars = Object.assign(Object.assign({}, pars), { onDone: resolve });
            runBuilderProcess(command, args, options, newPars);
        });
    }
    finally {
        if (interval !== undefined)
            window.clearInterval(interval);
    }
}
exports.runProcess = runProcess;
//# sourceMappingURL=data:application/json;base64,