"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const process_1 = require("process");
const path = require("path");
const os_1 = require("os");
const atom_1 = require("atom");
class BuilderProcess {
    constructor(command, args, options, params) {
        this.params = params;
        this.cwd = new atom_1.Directory(options.cwd || '.');
        this.hasError = false;
        const proc = child_process.spawn(command, args, options);
        const buffered = (handleOutput) => {
            let buffer = '';
            return (data) => {
                const output = data.toString('utf8');
                const [first, ...tail] = output.split(os_1.EOL);
                buffer += first;
                if (tail.length > 0) {
                    const lines = [buffer, ...tail.slice(0, -1)];
                    buffer = tail.slice(-1)[0];
                    handleOutput(lines);
                }
            };
        };
        const blockBuffered = (handleOutput) => {
            const startOfMessage = /\n(?=\S)(?!\d+ \|)/g;
            let buffer = [];
            proc.on('close', () => handleOutput(buffer.join('\n')));
            return buffered((lines) => {
                buffer.push(...lines);
                const [first, ...tail] = buffer.join('\n').split(startOfMessage);
                if (tail.length > 0) {
                    const last = tail.slice(-1)[0];
                    buffer = last.split('\n');
                    for (const block of [first, ...tail.slice(0, -1)]) {
                        handleOutput(block);
                    }
                }
            });
        };
        if (this.params.setCancelAction) {
            this.params.setCancelAction(() => {
                try {
                    process_1.kill(-proc.pid);
                }
                catch (e) {
                }
                try {
                    process_1.kill(proc.pid);
                }
                catch (e) {
                }
                try {
                    proc.kill();
                }
                catch (e) {
                }
            });
        }
        const handleMessage = (msg) => {
            this.checkProgress(msg);
            this.checkSeverityChange(msg);
            const parsed = this.parseMessage(msg);
            if (parsed && this.params.onMsg) {
                this.params.onMsg(parsed);
            }
        };
        proc.stdout.on('data', blockBuffered(handleMessage));
        proc.stderr.on('data', blockBuffered(handleMessage));
        proc.on('close', (exitCode) => {
            if (this.params.onDone) {
                this.params.onDone({ exitCode, hasError: this.hasError });
            }
        });
    }
    unindentMessage(lines) {
        const minIndent = Math.min(...lines.map((line) => {
            const match = line.match(/^\s*/);
            if (match) {
                return match[0].length;
            }
            else {
                return 0;
            }
        }));
        return lines.map((line) => line.slice(minIndent)).join('\n');
    }
    parseMessage(raw) {
        if (raw.trim() !== '') {
            const matchLoc = /^(.+):(\d+):(\d+):(?: (\w+):)?[ \t]*(\[[^\]]+\])?[ \t]*\n?([^]*)/;
            const matched = raw.trimRight().match(matchLoc);
            if (matched) {
                this.hasError = true;
                const [file, line, col, rawTyp, context, msg] = matched.slice(1);
                const typ = rawTyp ? rawTyp.toLowerCase() : 'error';
                return {
                    uri: path.isAbsolute(file) ? file : this.cwd.getFile(file).getPath(),
                    position: new atom_1.Point(parseInt(line, 10) - 1, parseInt(col, 10) - 1),
                    context,
                    message: {
                        text: this.unindentMessage(msg.split('\n')),
                        highlighter: 'hint.message.haskell',
                    },
                    severity: typ,
                };
            }
            else {
                return {
                    message: raw,
                    severity: this.params.severity,
                };
            }
        }
        return undefined;
    }
    checkSeverityChange(data) {
        if (!this.params.severityChangeRx) {
            return;
        }
        for (const [sev, rx] of Object.entries(this.params.severityChangeRx)) {
            if (data.match(rx)) {
                this.params.severity = sev;
                break;
            }
        }
    }
    checkProgress(data) {
        const match = data.match(/\[\s*([\d]+)\s+of\s+([\d]+)\s*\]/);
        if (match) {
            const progress = match[1];
            const total = match[2];
            this.params.onProgress &&
                this.params.onProgress(parseInt(progress, 10) / parseInt(total, 10));
        }
    }
}
async function runProcess(command, args, options, pars) {
    const newPars = Object.assign({}, pars);
    return new Promise((resolve) => {
        newPars.onDone = resolve;
        new BuilderProcess(command, args, options, newPars);
    });
}
exports.runProcess = runProcess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9idWlsZGVycy9iYXNlL3Byb2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBOEM7QUFDOUMscUNBQThCO0FBQzlCLDZCQUE0QjtBQUM1QiwyQkFBd0I7QUFJeEIsK0JBQXVDO0FBV3ZDLE1BQU0sY0FBYztJQUlsQixZQUNFLE9BQWUsRUFDZixJQUFjLEVBQ2QsT0FBbUMsRUFDM0IsTUFBZTtRQUFmLFdBQU0sR0FBTixNQUFNLENBQVM7UUFFdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGdCQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQTtRQU01QyxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQTtRQUNyQixNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFFeEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxZQUF1QyxFQUFFLEVBQUU7WUFDM0QsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFBO1lBQ2YsT0FBTyxDQUFDLElBQVksRUFBRSxFQUFFO2dCQUN0QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2dCQUNwQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFHLENBQUMsQ0FBQTtnQkFHMUMsTUFBTSxJQUFJLEtBQUssQ0FBQTtnQkFDZixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUVuQixNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtvQkFDNUMsTUFBTSxHQUFHLElBQUksQ0FB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QUMsUUFBUSxHQUFHLEdBQUcsQ0FBQTtnQkFDMUIsTUFBSzthQUNOO1NBQ0Y7SUFDSCxDQUFDO0lBRU8sYUFBYSxDQUFDLElBQVk7UUFDaEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFBO1FBQzVELElBQUksS0FBSyxFQUFFO1lBQ1QsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3pCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVU7Z0JBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1NBQ3ZFO0lBQ0gsQ0FBQztDQUNGO0FBRU0sS0FBSyxVQUFVLFVBQVUsQ0FDOUIsT0FBZSxFQUNmLElBQWMsRUFDZCxPQUFtQyxFQUNuQyxJQUFhO0lBRWIsTUFBTSxPQUFPLHFCQUFxQixJQUFJLENBQUUsQ0FBQTtJQUN4QyxPQUFPLElBQUksT0FBTyxDQUEwQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ3RFLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFBO1FBRXhCLElBQUksY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3JELENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQVpELGdDQVlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hpbGRfcHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJ1xuaW1wb3J0IHsga2lsbCB9IGZyb20gJ3Byb2Nlc3MnXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcydcbmltcG9ydCAqIGFzIFVQSSBmcm9tICdhdG9tLWhhc2tlbGwtdXBpJ1xuXG4vLyAvLyBBdG9tIGRlcGVuZGVuY2llc1xuaW1wb3J0IHsgRGlyZWN0b3J5LCBQb2ludCB9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcmFtcyB7XG4gIG9uTXNnPzogKG1zZzogVVBJLklSZXN1bHRJdGVtKSA9PiB2b2lkXG4gIG9uUHJvZ3Jlc3M/OiAocHJvZ3Jlc3M6IG51bWJlcikgPT4gdm9pZFxuICBvbkRvbmU/OiAoZG9uZTogeyBleGl0Q29kZTogbnVtYmVyOyBoYXNFcnJvcjogYm9vbGVhbiB9KSA9PiB2b2lkXG4gIHNldENhbmNlbEFjdGlvbj86IChhY3Rpb246ICgpID0+IHZvaWQpID0+IHZvaWRcbiAgc2V2ZXJpdHk6IFVQSS5UU2V2ZXJpdHlcbiAgc2V2ZXJpdHlDaGFuZ2VSeD86IHsgW0sgaW4gVVBJLlRTZXZlcml0eV06IFJlZ0V4cCB9XG59XG5cbmNsYXNzIEJ1aWxkZXJQcm9jZXNzIHtcbiAgcHJpdmF0ZSBjd2Q6IERpcmVjdG9yeVxuICBwcml2YXRlIGhhc0Vycm9yOiBib29sZWFuXG5cbiAgY29uc3RydWN0b3IoXG4gICAgY29tbWFuZDogc3RyaW5nLFxuICAgIGFyZ3M6IHN0cmluZ1tdLFxuICAgIG9wdGlvbnM6IGNoaWxkX3Byb2Nlc3MuU3Bhd25PcHRpb25zLFxuICAgIHByaXZhdGUgcGFyYW1zOiBJUGFyYW1zLFxuICApIHtcbiAgICB0aGlzLmN3ZCA9IG5ldyBEaXJlY3Rvcnkob3B0aW9ucy5jd2QgfHwgJy4nKVxuICAgIC8vIGNhYmFsIHJldHVybnMgZmFpbHVyZSB3aGVuIHRoZXJlIGFyZSB0eXBlIGVycm9ycyBfb3JfIHdoZW4gaXQgY2FuJ3RcbiAgICAvLyBjb21waWxlIHRoZSBjb2RlIGF0IGFsbCAoaS5lLiwgd2hlbiB0aGVyZSBhcmUgbWlzc2luZyBkZXBlbmRlbmNpZXMpLlxuICAgIC8vIFNpbmNlIGl0J3MgaGFyZCB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIHRoZXNlIHR3bywgd2UgbG9vayBhdCB0aGVcbiAgICAvLyBwYXJzZWQgZXJyb3JzO1xuICAgIC8vIHRoaXMuaGFzRXJyb3IgaXMgc2V0IGlmIHdlIGZpbmQgYW4gZXJyb3Ivd2FybmluZywgc2VlIHBhcnNlTWVzc2FnZVxuICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZVxuICAgIGNvbnN0IHByb2MgPSBjaGlsZF9wcm9jZXNzLnNwYXduKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpXG5cbiAgICBjb25zdCBidWZmZXJlZCA9IChoYW5kbGVPdXRwdXQ6IChsaW5lczogc3RyaW5nW10pID0+IHZvaWQpID0+IHtcbiAgICAgIGxldCBidWZmZXIgPSAnJ1xuICAgICAgcmV0dXJuIChkYXRhOiBCdWZmZXIpID0+IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gZGF0YS50b1N0cmluZygndXRmOCcpXG4gICAgICAgIGNvbnN0IFtmaXJzdCwgLi4udGFpbF0gPSBvdXRwdXQuc3BsaXQoRU9MKVxuICAgICAgICAvLyBeIFRoZSBvbmx5IHBsYWNlIHdoZXJlIHdlIGdldCBvcy1zcGVjaWZpYyBFT0wgKENSL0NSTEYvTEYpXG4gICAgICAgIC8vIGluIHRoZSByZXN0IG9mIHRoZSBjb2RlIHdlJ3JlIHVzaW5nIGp1c3QgTEYgKFxcbilcbiAgICAgICAgYnVmZmVyICs9IGZpcnN0XG4gICAgICAgIGlmICh0YWlsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyBpdCBtZWFucyB0aGVyZSdzIGF0IGxlYXN0IG9uZSBuZXdsaW5lXG4gICAgICAgICAgY29uc3QgbGluZXMgPSBbYnVmZmVyLCAuLi50YWlsLnNsaWNlKDAsIC0xKV1cbiAgICAgICAgICBidWZmZXIgPSB0YWlsLnNsaWNlKC0xKVswXVxuICAgICAgICAgIGhhbmRsZU91dHB1dChsaW5lcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGJsb2NrQnVmZmVyZWQgPSAoaGFuZGxlT3V0cHV0OiAoYmxvY2s6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xuICAgICAgLy8gU3RhcnQgb2YgYSBDYWJhbCBtZXNzYWdlXG4gICAgICBjb25zdCBzdGFydE9mTWVzc2FnZSA9IC9cXG4oPz1cXFMpKD8hXFxkKyBcXHwpL2dcbiAgICAgIGxldCBidWZmZXI6IHN0cmluZ1tdID0gW11cbiAgICAgIHByb2Mub24oJ2Nsb3NlJywgKCkgPT4gaGFuZGxlT3V0cHV0KGJ1ZmZlci5qb2luKCdcXG4nKSkpXG4gICAgICByZXR1cm4gYnVmZmVyZWQoKGxpbmVzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICBidWZmZXIucHVzaCguLi5saW5lcylcbiAgICAgICAgLy8gQ291bGQgaXRlcmF0ZSBvdmVyIGxpbmVzIGhlcmUsIGJ1dCB0aGlzIGlzIGVhc2llciwgaWYgbm90IGFzIGVmZmVjdGl2ZVxuICAgICAgICBjb25zdCBbZmlyc3QsIC4uLnRhaWxdID0gYnVmZmVyLmpvaW4oJ1xcbicpLnNwbGl0KHN0YXJ0T2ZNZXNzYWdlKVxuICAgICAgICBpZiAodGFpbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgbGFzdCA9IHRhaWwuc2xpY2UoLTEpWzBdXG4gICAgICAgICAgYnVmZmVyID0gbGFzdC5zcGxpdCgnXFxuJylcbiAgICAgICAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIFtmaXJzdCwgLi4udGFpbC5zbGljZSgwLCAtMSldKSB7XG4gICAgICAgICAgICBoYW5kbGVPdXRwdXQoYmxvY2spXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICh0aGlzLnBhcmFtcy5zZXRDYW5jZWxBY3Rpb24pIHtcbiAgICAgIHRoaXMucGFyYW1zLnNldENhbmNlbEFjdGlvbigoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAga2lsbCgtcHJvYy5waWQpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvKm5vb3AqL1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAga2lsbChwcm9jLnBpZClcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8qbm9vcCovXG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBwcm9jLmtpbGwoKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLypub29wKi9cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICBjb25zdCBoYW5kbGVNZXNzYWdlID0gKG1zZzogc3RyaW5nKSA9PiB7XG4gICAgICB0aGlzLmNoZWNrUHJvZ3Jlc3MobXNnKVxuICAgICAgdGhpcy5jaGVja1NldmVyaXR5Q2hhbmdlKG1zZylcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMucGFyc2VNZXNzYWdlKG1zZylcbiAgICAgIGlmIChwYXJzZWQgJiYgdGhpcy5wYXJhbXMub25Nc2cpIHtcbiAgICAgICAgdGhpcy5wYXJhbXMub25Nc2cocGFyc2VkKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE5vdGU6IGJsb2NrQnVmZmVyZWQgdXNlZCB0d2ljZSBiZWNhdXNlIHdlIG5lZWQgc2VwYXJhdGUgYnVmZmVyc1xuICAgIC8vIGZvciBzdGRlcnIgYW5kIHN0ZG91dFxuICAgIHByb2Muc3Rkb3V0Lm9uKCdkYXRhJywgYmxvY2tCdWZmZXJlZChoYW5kbGVNZXNzYWdlKSlcbiAgICBwcm9jLnN0ZGVyci5vbignZGF0YScsIGJsb2NrQnVmZmVyZWQoaGFuZGxlTWVzc2FnZSkpXG5cbiAgICBwcm9jLm9uKCdjbG9zZScsIChleGl0Q29kZSkgPT4ge1xuICAgICAgaWYgKHRoaXMucGFyYW1zLm9uRG9uZSkge1xuICAgICAgICB0aGlzLnBhcmFtcy5vbkRvbmUoeyBleGl0Q29kZSwgaGFzRXJyb3I6IHRoaXMuaGFzRXJyb3IgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSB1bmluZGVudE1lc3NhZ2UobGluZXM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgbWluSW5kZW50ID0gTWF0aC5taW4oXG4gICAgICAuLi5saW5lcy5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKC9eXFxzKi8pXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIHJldHVybiBtYXRjaFswXS5sZW5ndGhcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICApXG4gICAgcmV0dXJuIGxpbmVzLm1hcCgobGluZSkgPT4gbGluZS5zbGljZShtaW5JbmRlbnQpKS5qb2luKCdcXG4nKVxuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZU1lc3NhZ2UocmF3OiBzdHJpbmcpIHtcbiAgICBpZiAocmF3LnRyaW0oKSAhPT0gJycpIHtcbiAgICAgIGNvbnN0IG1hdGNoTG9jID0gL14oLispOihcXGQrKTooXFxkKyk6KD86IChcXHcrKTopP1sgXFx0XSooXFxbW15cXF1dK1xcXSk/WyBcXHRdKlxcbj8oW15dKikvXG4gICAgICBjb25zdCBtYXRjaGVkID0gcmF3LnRyaW1SaWdodCgpLm1hdGNoKG1hdGNoTG9jKVxuICAgICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgICAgdGhpcy5oYXNFcnJvciA9IHRydWVcblxuICAgICAgICBjb25zdCBbZmlsZSwgbGluZSwgY29sLCByYXdUeXAsIGNvbnRleHQsIG1zZ10gPSBtYXRjaGVkLnNsaWNlKDEpXG4gICAgICAgIGNvbnN0IHR5cCA9IHJhd1R5cCA/IHJhd1R5cC50b0xvd2VyQ2FzZSgpIDogJ2Vycm9yJ1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdXJpOiBwYXRoLmlzQWJzb2x1dGUoZmlsZSkgPyBmaWxlIDogdGhpcy5jd2QuZ2V0RmlsZShmaWxlKS5nZXRQYXRoKCksXG4gICAgICAgICAgcG9zaXRpb246IG5ldyBQb2ludChwYXJzZUludChsaW5lLCAxMCkgLSAxLCBwYXJzZUludChjb2wsIDEwKSAtIDEpLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgICAgdGV4dDogdGhpcy51bmluZGVudE1lc3NhZ2UobXNnLnNwbGl0KCdcXG4nKSksXG4gICAgICAgICAgICBoaWdobGlnaHRlcjogJ2hpbnQubWVzc2FnZS5oYXNrZWxsJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldmVyaXR5OiB0eXAsXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZTogcmF3LFxuICAgICAgICAgIHNldmVyaXR5OiB0aGlzLnBhcmFtcy5zZXZlcml0eSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cblxuICBwcml2YXRlIGNoZWNrU2V2ZXJpdHlDaGFuZ2UoZGF0YTogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLnBhcmFtcy5zZXZlcml0eUNoYW5nZVJ4KSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZm9yIChjb25zdCBbc2V2LCByeF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5wYXJhbXMuc2V2ZXJpdHlDaGFuZ2VSeCkpIHtcbiAgICAgIGlmIChkYXRhLm1hdGNoKHJ4KSkge1xuICAgICAgICB0aGlzLnBhcmFtcy5zZXZlcml0eSA9IHNldlxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tQcm9ncmVzcyhkYXRhOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtYXRjaCA9IGRhdGEubWF0Y2goL1xcW1xccyooW1xcZF0rKVxccytvZlxccysoW1xcZF0rKVxccypcXF0vKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBtYXRjaFsxXVxuICAgICAgY29uc3QgdG90YWwgPSBtYXRjaFsyXVxuICAgICAgdGhpcy5wYXJhbXMub25Qcm9ncmVzcyAmJlxuICAgICAgICB0aGlzLnBhcmFtcy5vblByb2dyZXNzKHBhcnNlSW50KHByb2dyZXNzLCAxMCkgLyBwYXJzZUludCh0b3RhbCwgMTApKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuUHJvY2VzcyhcbiAgY29tbWFuZDogc3RyaW5nLFxuICBhcmdzOiBzdHJpbmdbXSxcbiAgb3B0aW9uczogY2hpbGRfcHJvY2Vzcy5TcGF3bk9wdGlvbnMsXG4gIHBhcnM6IElQYXJhbXMsXG4pIHtcbiAgY29uc3QgbmV3UGFyczogdHlwZW9mIHBhcnMgPSB7IC4uLnBhcnMgfVxuICByZXR1cm4gbmV3IFByb21pc2U8eyBleGl0Q29kZTogbnVtYmVyOyBoYXNFcnJvcjogYm9vbGVhbiB9PigocmVzb2x2ZSkgPT4ge1xuICAgIG5ld1BhcnMub25Eb25lID0gcmVzb2x2ZVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdW51c2VkLWV4cHJlc3Npb25cbiAgICBuZXcgQnVpbGRlclByb2Nlc3MoY29tbWFuZCwgYXJncywgb3B0aW9ucywgbmV3UGFycylcbiAgfSlcbn1cbiJdfQ==