"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = require("./process");
const defaultGlobals = {
    process,
    runProcess: process_1.runProcess,
};
class BuilderBase {
    constructor(processName, opts, globals = {}) {
        this.processName = processName;
        this.opts = opts;
        this.globals = Object.assign({}, defaultGlobals, globals);
        this.spawnOpts = this.getSpawnOpts();
        this.cabalArgs = [];
    }
    async runCommand(cmd) {
        return this[cmd]();
    }
    async runCabal(extraArgs = []) {
        return this.globals.runProcess(this.processName, this.cabalArgs.concat(extraArgs), this.spawnOpts, this.opts.opts);
    }
    additionalEnvSetup(env) {
        return env;
    }
    getSpawnOpts() {
        const opts = {
            cwd: this.opts.cabalRoot.getPath(),
            detached: true,
            env: {},
        };
        const env = Object.assign({}, this.globals.process.env);
        if (this.globals.process.platform === 'win32') {
            const path = collectPathCapitalizations(env);
            env.PATH = path.join(path_1.delimiter);
        }
        opts.env = this.additionalEnvSetup(env);
        return opts;
    }
}
exports.BuilderBase = BuilderBase;
function collectPathCapitalizations(env) {
    const path = [];
    const capMask = (str, mask) => {
        const a = str.split('');
        for (let i = 0; i < a.length; i++) {
            if (mask & Math.pow(2, i)) {
                const j = a.length - i - 1;
                a[j] = a[j].toUpperCase();
            }
        }
        return a.join('');
    };
    for (let m = 0b1111; m >= 0; m--) {
        const vn = capMask('path', m);
        const evn = env[vn];
        if (evn !== undefined) {
            path.push(evn);
        }
    }
    return path;
}
exports.collectPathCapitalizations = collectPathCapitalizations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnQztBQUloQyx1Q0FBK0M7QUFtQi9DLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLE9BQU87SUFDUCxVQUFVLEVBQVYsb0JBQVU7Q0FDWCxDQUFBO0FBRUQsTUFBc0IsV0FBVztJQVMvQixZQUNVLFdBQW1CLEVBQ2pCLElBQWMsRUFDeEIsVUFBa0IsRUFBRTtRQUZaLGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQ2pCLFNBQUksR0FBSixJQUFJLENBQVU7UUFHeEIsSUFBSSxDQUFDLE9BQU8scUJBQVEsY0FBYyxFQUFLLE9BQU8sQ0FBRSxDQUFBO1FBQ2hELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQWlCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUE7SUFDcEIsQ0FBQztJQVFTLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBc0IsRUFBRTtRQUMvQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUM1QixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDaEMsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDZixDQUFBO0lBQ0gsQ0FBQztJQUVTLGtCQUFrQixDQUFDLEdBQXVCO1FBQ2xELE9BQU8sR0FBRyxDQUFBO0lBQ1osQ0FBQztJQUVPLFlBQVk7UUFFbEIsTUFBTSxJQUFJLEdBQUc7WUFDWCxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO1lBQ2xDLFFBQVEsRUFBRSxJQUFJO1lBQ2QsR0FBRyxFQUFFLEVBQUU7U0FDUixDQUFBO1FBRUQsTUFBTSxHQUFHLHFCQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBRSxDQUFBO1FBRzNDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtZQUM3QyxNQUFNLElBQUksR0FBRywwQkFBMEIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUM1QyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1NBQ2hDO1FBRUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDdkMsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0NBQ0Y7QUE3REQsa0NBNkRDO0FBRUQsU0FBZ0IsMEJBQTBCLENBQUMsR0FBdUI7SUFDaEUsTUFBTSxJQUFJLEdBQWEsRUFBRSxDQUFBO0lBQ3pCLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxFQUFFO1FBQzVDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDdkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFFakMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3pCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDMUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTthQUMxQjtTQUNGO1FBQ0QsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ25CLENBQUMsQ0FBQTtJQUNELEtBQUssSUFBSSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDaEMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM3QixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDbkIsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFFO1lBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDZjtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUE7QUFDYixDQUFDO0FBckJELGdFQXFCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlbGltaXRlciB9IGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IENhYmFsQ29tbWFuZCwgVGFyZ2V0UGFyYW1UeXBlRm9yQnVpbGRlciB9IGZyb20gJy4uLy4uL2NvbW1vbidcblxuaW1wb3J0IHsgcnVuUHJvY2VzcywgSVBhcmFtcyB9IGZyb20gJy4vcHJvY2VzcydcbmltcG9ydCB7IERpcmVjdG9yeSB9IGZyb20gJ2F0b20nXG5leHBvcnQgeyBJUGFyYW1zIH1cblxuZXhwb3J0IGludGVyZmFjZSBDdG9yT3B0cyB7XG4gIG9wdHM6IElQYXJhbXNcbiAgdGFyZ2V0OiBUYXJnZXRQYXJhbVR5cGVGb3JCdWlsZGVyXG4gIGNhYmFsUm9vdDogRGlyZWN0b3J5XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0VHlwZSB7XG4gIGV4aXRDb2RlOiBudW1iZXIgfCBudWxsXG4gIGhhc0Vycm9yOiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIEJ1aWxkZXIgPSBSZWNvcmQ8Q2FiYWxDb21tYW5kLCAoKSA9PiBQcm9taXNlPFJlc3VsdFR5cGU+PiAmIHtcbiAgcnVuQ29tbWFuZChjbWQ6IENhYmFsQ29tbWFuZCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbn1cblxuY29uc3QgZGVmYXVsdEdsb2JhbHMgPSB7XG4gIHByb2Nlc3MsXG4gIHJ1blByb2Nlc3MsXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCdWlsZGVyQmFzZSBpbXBsZW1lbnRzIEJ1aWxkZXIge1xuICBwcm90ZWN0ZWQgY2FiYWxBcmdzOiBzdHJpbmdbXVxuICBwcm90ZWN0ZWQgc3Bhd25PcHRzOiB7XG4gICAgY3dkOiBzdHJpbmdcbiAgICBkZXRhY2hlZDogYm9vbGVhblxuICAgIGVudjogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfVxuICB9XG4gIHByaXZhdGUgZ2xvYmFsczogdHlwZW9mIGRlZmF1bHRHbG9iYWxzXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBwcm9jZXNzTmFtZTogc3RyaW5nLFxuICAgIHByb3RlY3RlZCBvcHRzOiBDdG9yT3B0cyxcbiAgICBnbG9iYWxzOiBvYmplY3QgPSB7fSxcbiAgKSB7XG4gICAgdGhpcy5nbG9iYWxzID0geyAuLi5kZWZhdWx0R2xvYmFscywgLi4uZ2xvYmFscyB9XG4gICAgdGhpcy5zcGF3bk9wdHMgPSB0aGlzLmdldFNwYXduT3B0cygpXG4gICAgdGhpcy5jYWJhbEFyZ3MgPSBbXVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1bkNvbW1hbmQoY21kOiBDYWJhbENvbW1hbmQpOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gdGhpc1tjbWRdKClcbiAgfVxuXG4gIHB1YmxpYyBhYnN0cmFjdCBidWlsZCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG4gIHB1YmxpYyBhYnN0cmFjdCB0ZXN0KCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGJlbmNoKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGNsZWFuKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGRlcHMoKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuXG4gIHByb3RlY3RlZCBhc3luYyBydW5DYWJhbChleHRyYUFyZ3M6IHN0cmluZ1tdID0gW10pOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gdGhpcy5nbG9iYWxzLnJ1blByb2Nlc3MoXG4gICAgICB0aGlzLnByb2Nlc3NOYW1lLFxuICAgICAgdGhpcy5jYWJhbEFyZ3MuY29uY2F0KGV4dHJhQXJncyksXG4gICAgICB0aGlzLnNwYXduT3B0cyxcbiAgICAgIHRoaXMub3B0cy5vcHRzLFxuICAgIClcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRpdGlvbmFsRW52U2V0dXAoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpOiB0eXBlb2YgcHJvY2Vzcy5lbnYge1xuICAgIHJldHVybiBlbnZcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3Bhd25PcHRzKCkge1xuICAgIC8vIFNldHVwIGRlZmF1bHQgb3B0c1xuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICBjd2Q6IHRoaXMub3B0cy5jYWJhbFJvb3QuZ2V0UGF0aCgpLFxuICAgICAgZGV0YWNoZWQ6IHRydWUsXG4gICAgICBlbnY6IHt9LFxuICAgIH1cblxuICAgIGNvbnN0IGVudiA9IHsgLi4udGhpcy5nbG9iYWxzLnByb2Nlc3MuZW52IH1cblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogdG90YWxpdHktY2hlY2tcbiAgICBpZiAodGhpcy5nbG9iYWxzLnByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICAgIGNvbnN0IHBhdGggPSBjb2xsZWN0UGF0aENhcGl0YWxpemF0aW9ucyhlbnYpXG4gICAgICBlbnYuUEFUSCA9IHBhdGguam9pbihkZWxpbWl0ZXIpXG4gICAgfVxuXG4gICAgb3B0cy5lbnYgPSB0aGlzLmFkZGl0aW9uYWxFbnZTZXR1cChlbnYpXG4gICAgcmV0dXJuIG9wdHNcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdFBhdGhDYXBpdGFsaXphdGlvbnMoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpIHtcbiAgY29uc3QgcGF0aDogc3RyaW5nW10gPSBbXVxuICBjb25zdCBjYXBNYXNrID0gKHN0cjogc3RyaW5nLCBtYXNrOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBhID0gc3RyLnNwbGl0KCcnKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1iaXR3aXNlXG4gICAgICBpZiAobWFzayAmIE1hdGgucG93KDIsIGkpKSB7XG4gICAgICAgIGNvbnN0IGogPSBhLmxlbmd0aCAtIGkgLSAxXG4gICAgICAgIGFbal0gPSBhW2pdLnRvVXBwZXJDYXNlKClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGEuam9pbignJylcbiAgfVxuICBmb3IgKGxldCBtID0gMGIxMTExOyBtID49IDA7IG0tLSkge1xuICAgIGNvbnN0IHZuID0gY2FwTWFzaygncGF0aCcsIG0pXG4gICAgY29uc3QgZXZuID0gZW52W3ZuXVxuICAgIGlmIChldm4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGF0aC5wdXNoKGV2bilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGhcbn1cbiJdfQ==