"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = require("./process");
const defaultGlobals = {
    process,
    runProcess: process_1.runProcess,
};
class BuilderBase {
    constructor(processName, opts, globals = {}) {
        this.processName = processName;
        this.opts = opts;
        this.globals = Object.assign(Object.assign({}, defaultGlobals), globals);
        this.spawnOpts = this.getSpawnOpts();
    }
    async runCommand(cmd) {
        return this[cmd]();
    }
    async runCabal(args, override = {}) {
        return this.globals.runProcess(this.processName, args, this.spawnOpts, Object.assign(Object.assign({}, this.opts.opts), override));
    }
    additionalEnvSetup(env) {
        return env;
    }
    getSpawnOpts() {
        const opts = {
            cwd: this.opts.cabalRoot.getPath(),
            detached: true,
            env: {},
        };
        const env = Object.assign({}, this.globals.process.env);
        if (this.globals.process.platform === 'win32') {
            const path = collectPathCapitalizations(env);
            env.PATH = path.join(path_1.delimiter);
        }
        opts.env = this.additionalEnvSetup(env);
        return opts;
    }
}
exports.BuilderBase = BuilderBase;
function collectPathCapitalizations(env) {
    const path = [];
    const capMask = (str, mask) => {
        const a = str.split('');
        for (let i = 0; i < a.length; i++) {
            if (mask & Math.pow(2, i)) {
                const j = a.length - i - 1;
                a[j] = a[j].toUpperCase();
            }
        }
        return a.join('');
    };
    for (let m = 0b1111; m >= 0; m--) {
        const vn = capMask('path', m);
        const evn = env[vn];
        if (evn !== undefined) {
            path.push(evn);
        }
    }
    return path;
}
exports.collectPathCapitalizations = collectPathCapitalizations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnQztBQUloQyx1Q0FBK0M7QUFtQi9DLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLE9BQU87SUFDUCxVQUFVLEVBQVYsb0JBQVU7Q0FDWCxDQUFBO0FBRUQsTUFBc0IsV0FBVztJQVEvQixZQUNVLFdBQW1CLEVBQ1IsSUFBYyxFQUNqQyxVQUFrQixFQUFFO1FBRlosZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDUixTQUFJLEdBQUosSUFBSSxDQUFVO1FBR2pDLElBQUksQ0FBQyxPQUFPLG1DQUFRLGNBQWMsR0FBSyxPQUFPLENBQUUsQ0FBQTtRQUNoRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtJQUN0QyxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFpQjtRQUN2QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFBO0lBQ3BCLENBQUM7SUFRUyxLQUFLLENBQUMsUUFBUSxDQUN0QixJQUFjLEVBQ2QsV0FBNkIsRUFBRTtRQUUvQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLGtDQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FDZCxRQUFRLEVBQ1gsQ0FBQTtJQUNKLENBQUM7SUFFUyxrQkFBa0IsQ0FBQyxHQUF1QjtRQUNsRCxPQUFPLEdBQUcsQ0FBQTtJQUNaLENBQUM7SUFFTyxZQUFZO1FBRWxCLE1BQU0sSUFBSSxHQUFHO1lBQ1gsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtZQUNsQyxRQUFRLEVBQUUsSUFBSTtZQUNkLEdBQUcsRUFBRSxFQUFFO1NBQ1IsQ0FBQTtRQUVELE1BQU0sR0FBRyxxQkFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsQ0FBQTtRQUczQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7WUFDN0MsTUFBTSxJQUFJLEdBQUcsMEJBQTBCLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDNUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFTLENBQUMsQ0FBQTtTQUNoQztRQUVELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZDLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQUNGO0FBNURELGtDQTREQztBQUVELFNBQWdCLDBCQUEwQixDQUFDLEdBQXVCO0lBQ2hFLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQTtJQUN6QixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtRQUM1QyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBRWpDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQzFCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7YUFDMUI7U0FDRjtRQUNELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNuQixDQUFDLENBQUE7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDN0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ25CLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ2Y7S0FDRjtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQXJCRCxnRUFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWxpbWl0ZXIgfSBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgeyBDYWJhbENvbW1hbmQsIFRhcmdldFBhcmFtVHlwZUZvckJ1aWxkZXIgfSBmcm9tICcuLi8uLi9jb21tb24nXG5cbmltcG9ydCB7IHJ1blByb2Nlc3MsIElQYXJhbXMgfSBmcm9tICcuL3Byb2Nlc3MnXG5pbXBvcnQgeyBEaXJlY3RvcnkgfSBmcm9tICdhdG9tJ1xuZXhwb3J0IHsgSVBhcmFtcyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3Rvck9wdHMge1xuICByZWFkb25seSBvcHRzOiBJUGFyYW1zXG4gIHJlYWRvbmx5IHRhcmdldDogVGFyZ2V0UGFyYW1UeXBlRm9yQnVpbGRlclxuICByZWFkb25seSBjYWJhbFJvb3Q6IERpcmVjdG9yeVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdFR5cGUge1xuICBleGl0Q29kZTogbnVtYmVyIHwgbnVsbFxuICBoYXNFcnJvcjogYm9vbGVhblxufVxuXG5leHBvcnQgdHlwZSBCdWlsZGVyID0gUmVjb3JkPENhYmFsQ29tbWFuZCwgKCkgPT4gUHJvbWlzZTxSZXN1bHRUeXBlPj4gJiB7XG4gIHJ1bkNvbW1hbmQoY21kOiBDYWJhbENvbW1hbmQpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG59XG5cbmNvbnN0IGRlZmF1bHRHbG9iYWxzID0ge1xuICBwcm9jZXNzLFxuICBydW5Qcm9jZXNzLFxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQnVpbGRlckJhc2UgaW1wbGVtZW50cyBCdWlsZGVyIHtcbiAgcHJvdGVjdGVkIHJlYWRvbmx5IHNwYXduT3B0czoge1xuICAgIGN3ZDogc3RyaW5nXG4gICAgZGV0YWNoZWQ6IGJvb2xlYW5cbiAgICBlbnY6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkIH1cbiAgfVxuICBwcml2YXRlIHJlYWRvbmx5IGdsb2JhbHM6IHR5cGVvZiBkZWZhdWx0R2xvYmFsc1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcHJvY2Vzc05hbWU6IHN0cmluZyxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgb3B0czogQ3Rvck9wdHMsXG4gICAgZ2xvYmFsczogb2JqZWN0ID0ge30sXG4gICkge1xuICAgIHRoaXMuZ2xvYmFscyA9IHsgLi4uZGVmYXVsdEdsb2JhbHMsIC4uLmdsb2JhbHMgfVxuICAgIHRoaXMuc3Bhd25PcHRzID0gdGhpcy5nZXRTcGF3bk9wdHMoKVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1bkNvbW1hbmQoY21kOiBDYWJhbENvbW1hbmQpOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gdGhpc1tjbWRdKClcbiAgfVxuXG4gIHB1YmxpYyBhYnN0cmFjdCBidWlsZCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG4gIHB1YmxpYyBhYnN0cmFjdCB0ZXN0KCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGJlbmNoKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGNsZWFuKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGRlcHMoKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuXG4gIHByb3RlY3RlZCBhc3luYyBydW5DYWJhbChcbiAgICBhcmdzOiBzdHJpbmdbXSxcbiAgICBvdmVycmlkZTogUGFydGlhbDxJUGFyYW1zPiA9IHt9LFxuICApOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gdGhpcy5nbG9iYWxzLnJ1blByb2Nlc3ModGhpcy5wcm9jZXNzTmFtZSwgYXJncywgdGhpcy5zcGF3bk9wdHMsIHtcbiAgICAgIC4uLnRoaXMub3B0cy5vcHRzLFxuICAgICAgLi4ub3ZlcnJpZGUsXG4gICAgfSlcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRpdGlvbmFsRW52U2V0dXAoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpOiB0eXBlb2YgcHJvY2Vzcy5lbnYge1xuICAgIHJldHVybiBlbnZcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3Bhd25PcHRzKCkge1xuICAgIC8vIFNldHVwIGRlZmF1bHQgb3B0c1xuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICBjd2Q6IHRoaXMub3B0cy5jYWJhbFJvb3QuZ2V0UGF0aCgpLFxuICAgICAgZGV0YWNoZWQ6IHRydWUsXG4gICAgICBlbnY6IHt9LFxuICAgIH1cblxuICAgIGNvbnN0IGVudiA9IHsgLi4udGhpcy5nbG9iYWxzLnByb2Nlc3MuZW52IH1cblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogdG90YWxpdHktY2hlY2tcbiAgICBpZiAodGhpcy5nbG9iYWxzLnByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicpIHtcbiAgICAgIGNvbnN0IHBhdGggPSBjb2xsZWN0UGF0aENhcGl0YWxpemF0aW9ucyhlbnYpXG4gICAgICBlbnYuUEFUSCA9IHBhdGguam9pbihkZWxpbWl0ZXIpXG4gICAgfVxuXG4gICAgb3B0cy5lbnYgPSB0aGlzLmFkZGl0aW9uYWxFbnZTZXR1cChlbnYpXG4gICAgcmV0dXJuIG9wdHNcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdFBhdGhDYXBpdGFsaXphdGlvbnMoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpIHtcbiAgY29uc3QgcGF0aDogc3RyaW5nW10gPSBbXVxuICBjb25zdCBjYXBNYXNrID0gKHN0cjogc3RyaW5nLCBtYXNrOiBudW1iZXIpID0+IHtcbiAgICBjb25zdCBhID0gc3RyLnNwbGl0KCcnKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1iaXR3aXNlXG4gICAgICBpZiAobWFzayAmIE1hdGgucG93KDIsIGkpKSB7XG4gICAgICAgIGNvbnN0IGogPSBhLmxlbmd0aCAtIGkgLSAxXG4gICAgICAgIGFbal0gPSBhW2pdLnRvVXBwZXJDYXNlKClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGEuam9pbignJylcbiAgfVxuICBmb3IgKGxldCBtID0gMGIxMTExOyBtID49IDA7IG0tLSkge1xuICAgIGNvbnN0IHZuID0gY2FwTWFzaygncGF0aCcsIG0pXG4gICAgY29uc3QgZXZuID0gZW52W3ZuXVxuICAgIGlmIChldm4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcGF0aC5wdXNoKGV2bilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGhcbn1cbiJdfQ==