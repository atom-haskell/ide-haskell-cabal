"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = require("./process");
class BuilderBase {
    constructor(processName, opts) {
        this.processName = processName;
        this.opts = opts;
        this.spawnOpts = this.getSpawnOpts();
        this.cabalArgs = [];
    }
    async runCommand(cmd) {
        return this[cmd]();
    }
    async runCabal(extraArgs = []) {
        return process_1.runProcess(this.processName, this.cabalArgs.concat(extraArgs), this.spawnOpts, this.opts.opts);
    }
    additionalEnvSetup(env) {
        return env;
    }
    getSpawnOpts() {
        const opts = {
            cwd: this.opts.cabalRoot.getPath(),
            detached: true,
            env: {},
        };
        const env = Object.assign({}, process.env);
        if (process.platform === 'win32') {
            const path = [];
            const capMask = (str, mask) => {
                const a = str.split('');
                for (let i = 0; i < a.length; i++) {
                    if (mask & Math.pow(2, i)) {
                        a[i] = a[i].toUpperCase();
                    }
                }
                return a.join('');
            };
            for (let m = 0b1111; m >= 0; m--) {
                const vn = capMask('path', m);
                const evn = env[vn];
                if (evn !== undefined) {
                    path.push(evn);
                }
            }
            env.PATH = path.join(path_1.delimiter);
        }
        opts.env = this.additionalEnvSetup(env);
        return opts;
    }
}
exports.BuilderBase = BuilderBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnQztBQUloQyx1Q0FBK0M7QUFtQi9DO0lBUUUsWUFBb0IsV0FBbUIsRUFBWSxJQUFjO1FBQTdDLGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQVksU0FBSSxHQUFKLElBQUksQ0FBVTtRQUMvRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFpQjtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUE7SUFDcEIsQ0FBQztJQVFTLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBc0IsRUFBRTtRQUMvQyxNQUFNLENBQUMsb0JBQVUsQ0FDZixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDaEMsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDZixDQUFBO0lBQ0gsQ0FBQztJQUVTLGtCQUFrQixDQUFDLEdBQXVCO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRU8sWUFBWTtRQUVsQixNQUFNLElBQUksR0FBRztZQUNYLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDbEMsUUFBUSxFQUFFLElBQUk7WUFDZCxHQUFHLEVBQUUsRUFBRTtTQUNSLENBQUE7UUFFRCxNQUFNLEdBQUcscUJBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBRSxDQUFBO1FBRzlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLElBQUksR0FBYSxFQUFFLENBQUE7WUFDekIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEVBQUU7Z0JBQzVDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ3ZCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUVsQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMxQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO29CQUMzQixDQUFDO2dCQUNILENBQUM7Z0JBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDbkIsQ0FBQyxDQUFBO1lBQ0QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDakMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDN0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNuQixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDaEIsQ0FBQztZQUNILENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1FBQ2pDLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQUNGO0FBeEVELGtDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlbGltaXRlciB9IGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IENhYmFsQ29tbWFuZCwgVGFyZ2V0UGFyYW1UeXBlRm9yQnVpbGRlciB9IGZyb20gJy4uLy4uL2NvbW1vbidcblxuaW1wb3J0IHsgcnVuUHJvY2VzcywgSVBhcmFtcyB9IGZyb20gJy4vcHJvY2VzcydcbmltcG9ydCB7IERpcmVjdG9yeSB9IGZyb20gJ2F0b20nXG5leHBvcnQgeyBJUGFyYW1zIH1cblxuZXhwb3J0IGludGVyZmFjZSBDdG9yT3B0cyB7XG4gIG9wdHM6IElQYXJhbXNcbiAgdGFyZ2V0OiBUYXJnZXRQYXJhbVR5cGVGb3JCdWlsZGVyXG4gIGNhYmFsUm9vdDogRGlyZWN0b3J5XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0VHlwZSB7XG4gIGV4aXRDb2RlOiBudW1iZXIgfCBudWxsXG4gIGhhc0Vycm9yOiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIFRCdWlsZGVyQmFzZSA9IFJlY29yZDxDYWJhbENvbW1hbmQsICgpID0+IFByb21pc2U8UmVzdWx0VHlwZT4+ICYge1xuICBydW5Db21tYW5kKGNtZDogQ2FiYWxDb21tYW5kKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQnVpbGRlckJhc2UgaW1wbGVtZW50cyBUQnVpbGRlckJhc2Uge1xuICBwcm90ZWN0ZWQgY2FiYWxBcmdzOiBzdHJpbmdbXVxuICBwcm90ZWN0ZWQgc3Bhd25PcHRzOiB7XG4gICAgY3dkOiBzdHJpbmdcbiAgICBkZXRhY2hlZDogYm9vbGVhblxuICAgIGVudjogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQgfVxuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwcm9jZXNzTmFtZTogc3RyaW5nLCBwcm90ZWN0ZWQgb3B0czogQ3Rvck9wdHMpIHtcbiAgICB0aGlzLnNwYXduT3B0cyA9IHRoaXMuZ2V0U3Bhd25PcHRzKClcbiAgICB0aGlzLmNhYmFsQXJncyA9IFtdXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcnVuQ29tbWFuZChjbWQ6IENhYmFsQ29tbWFuZCk6IFByb21pc2U8UmVzdWx0VHlwZT4ge1xuICAgIHJldHVybiB0aGlzW2NtZF0oKVxuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IGJ1aWxkKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IHRlc3QoKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuICBwdWJsaWMgYWJzdHJhY3QgYmVuY2goKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuICBwdWJsaWMgYWJzdHJhY3QgY2xlYW4oKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuICBwdWJsaWMgYWJzdHJhY3QgZGVwcygpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG5cbiAgcHJvdGVjdGVkIGFzeW5jIHJ1bkNhYmFsKGV4dHJhQXJnczogc3RyaW5nW10gPSBbXSk6IFByb21pc2U8UmVzdWx0VHlwZT4ge1xuICAgIHJldHVybiBydW5Qcm9jZXNzKFxuICAgICAgdGhpcy5wcm9jZXNzTmFtZSxcbiAgICAgIHRoaXMuY2FiYWxBcmdzLmNvbmNhdChleHRyYUFyZ3MpLFxuICAgICAgdGhpcy5zcGF3bk9wdHMsXG4gICAgICB0aGlzLm9wdHMub3B0cyxcbiAgICApXG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkaXRpb25hbEVudlNldHVwKGVudjogdHlwZW9mIHByb2Nlc3MuZW52KTogdHlwZW9mIHByb2Nlc3MuZW52IHtcbiAgICByZXR1cm4gZW52XG4gIH1cblxuICBwcml2YXRlIGdldFNwYXduT3B0cygpIHtcbiAgICAvLyBTZXR1cCBkZWZhdWx0IG9wdHNcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgY3dkOiB0aGlzLm9wdHMuY2FiYWxSb290LmdldFBhdGgoKSxcbiAgICAgIGRldGFjaGVkOiB0cnVlLFxuICAgICAgZW52OiB7fSxcbiAgICB9XG5cbiAgICBjb25zdCBlbnYgPSB7IC4uLnByb2Nlc3MuZW52IH1cblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogdG90YWxpdHktY2hlY2tcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgY29uc3QgcGF0aDogc3RyaW5nW10gPSBbXVxuICAgICAgY29uc3QgY2FwTWFzayA9IChzdHI6IHN0cmluZywgbWFzazogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGEgPSBzdHIuc3BsaXQoJycpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYml0d2lzZVxuICAgICAgICAgIGlmIChtYXNrICYgTWF0aC5wb3coMiwgaSkpIHtcbiAgICAgICAgICAgIGFbaV0gPSBhW2ldLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEuam9pbignJylcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IG0gPSAwYjExMTE7IG0gPj0gMDsgbS0tKSB7XG4gICAgICAgIGNvbnN0IHZuID0gY2FwTWFzaygncGF0aCcsIG0pXG4gICAgICAgIGNvbnN0IGV2biA9IGVudlt2bl1cbiAgICAgICAgaWYgKGV2biAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGF0aC5wdXNoKGV2bilcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZW52LlBBVEggPSBwYXRoLmpvaW4oZGVsaW1pdGVyKVxuICAgIH1cblxuICAgIG9wdHMuZW52ID0gdGhpcy5hZGRpdGlvbmFsRW52U2V0dXAoZW52KVxuICAgIHJldHVybiBvcHRzXG4gIH1cbn1cbiJdfQ==