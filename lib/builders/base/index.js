"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = require("./process");
class BuilderBase {
    constructor(processName, opts) {
        this.processName = processName;
        this.opts = opts;
        this.spawnOpts = this.getSpawnOpts();
        this.cabalArgs = [];
    }
    async runCommand(cmd) {
        return this[cmd]();
    }
    async runCabal(extraArgs = []) {
        return process_1.runProcess(this.processName, this.cabalArgs.concat(extraArgs), this.spawnOpts, this.opts.opts);
    }
    additionalEnvSetup(env) {
        return env;
    }
    getSpawnOpts() {
        const opts = {
            cwd: this.opts.cabalRoot.getPath(),
            detached: true,
            env: {},
        };
        const env = Object.assign({}, process.env);
        if (process.platform === 'win32') {
            const path = [];
            const capMask = (str, mask) => {
                const a = str.split('');
                for (let i = 0; i < a.length; i++) {
                    if (mask & Math.pow(2, i)) {
                        a[i] = a[i].toUpperCase();
                    }
                }
                return a.join('');
            };
            for (let m = 0b1111; m >= 0; m--) {
                const vn = capMask('path', m);
                const evn = env[vn];
                if (evn !== undefined) {
                    path.push(evn);
                }
            }
            env.PATH = path.join(path_1.delimiter);
        }
        opts.env = this.additionalEnvSetup(env);
        return opts;
    }
}
exports.BuilderBase = BuilderBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnQztBQUloQyx1Q0FBK0M7QUFtQi9DO0lBUUUsWUFBb0IsV0FBbUIsRUFBWSxJQUFjO1FBQTdDLGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQVksU0FBSSxHQUFKLElBQUksQ0FBVTtRQUMvRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFpQjtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUE7SUFDcEIsQ0FBQztJQVFTLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBc0IsRUFBRTtRQUMvQyxNQUFNLENBQUMsb0JBQVUsQ0FDZixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDaEMsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDZixDQUFBO0lBQ0gsQ0FBQztJQUVTLGtCQUFrQixDQUFDLEdBQXVCO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRU8sWUFBWTtRQUVsQixNQUFNLElBQUksR0FBRztZQUNYLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDbEMsUUFBUSxFQUFFLElBQUk7WUFDZCxHQUFHLEVBQUUsRUFBRTtTQUNSLENBQUE7UUFFRCxNQUFNLEdBQUcscUJBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBRSxDQUFBO1FBRzlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLElBQUksR0FBYSxFQUFFLENBQUE7WUFDekIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEVBQUU7Z0JBQzVDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ3ZCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUVsQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMxQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO29CQUMzQixDQUFDO2dCQUNILENBQUM7Z0JBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDbkIsQ0FBQyxDQUFBO1lBQ0QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDakMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDN0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNuQixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDaEIsQ0FBQztZQUNILENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1FBQ2pDLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQUNGO0FBeEVELGtDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlbGltaXRlciB9IGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IENhYmFsQ29tbWFuZCwgVGFyZ2V0UGFyYW1UeXBlRm9yQnVpbGRlciB9IGZyb20gJy4uLy4uL2NvbW1vbidcblxuaW1wb3J0IHsgcnVuUHJvY2VzcywgSVBhcmFtcyB9IGZyb20gJy4vcHJvY2VzcydcbmltcG9ydCB7IERpcmVjdG9yeSB9IGZyb20gJ2F0b20nXG5leHBvcnQgeyBJUGFyYW1zIH1cblxuZXhwb3J0IGludGVyZmFjZSBDdG9yT3B0cyB7XG4gIG9wdHM6IElQYXJhbXNcbiAgdGFyZ2V0OiBUYXJnZXRQYXJhbVR5cGVGb3JCdWlsZGVyXG4gIGNhYmFsUm9vdDogRGlyZWN0b3J5XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0VHlwZSB7XG4gIGV4aXRDb2RlOiBudW1iZXIgfCBudWxsXG4gIGhhc0Vycm9yOiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIEJ1aWxkZXIgPSBSZWNvcmQ8Q2FiYWxDb21tYW5kLCAoKSA9PiBQcm9taXNlPFJlc3VsdFR5cGU+PiAmIHtcbiAgcnVuQ29tbWFuZChjbWQ6IENhYmFsQ29tbWFuZCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJ1aWxkZXJCYXNlIGltcGxlbWVudHMgQnVpbGRlciB7XG4gIHByb3RlY3RlZCBjYWJhbEFyZ3M6IHN0cmluZ1tdXG4gIHByb3RlY3RlZCBzcGF3bk9wdHM6IHtcbiAgICBjd2Q6IHN0cmluZ1xuICAgIGRldGFjaGVkOiBib29sZWFuXG4gICAgZW52OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZCB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHByb2Nlc3NOYW1lOiBzdHJpbmcsIHByb3RlY3RlZCBvcHRzOiBDdG9yT3B0cykge1xuICAgIHRoaXMuc3Bhd25PcHRzID0gdGhpcy5nZXRTcGF3bk9wdHMoKVxuICAgIHRoaXMuY2FiYWxBcmdzID0gW11cbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBydW5Db21tYW5kKGNtZDogQ2FiYWxDb21tYW5kKTogUHJvbWlzZTxSZXN1bHRUeXBlPiB7XG4gICAgcmV0dXJuIHRoaXNbY21kXSgpXG4gIH1cblxuICBwdWJsaWMgYWJzdHJhY3QgYnVpbGQoKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuICBwdWJsaWMgYWJzdHJhY3QgdGVzdCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG4gIHB1YmxpYyBhYnN0cmFjdCBiZW5jaCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG4gIHB1YmxpYyBhYnN0cmFjdCBjbGVhbigpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG4gIHB1YmxpYyBhYnN0cmFjdCBkZXBzKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cblxuICBwcm90ZWN0ZWQgYXN5bmMgcnVuQ2FiYWwoZXh0cmFBcmdzOiBzdHJpbmdbXSA9IFtdKTogUHJvbWlzZTxSZXN1bHRUeXBlPiB7XG4gICAgcmV0dXJuIHJ1blByb2Nlc3MoXG4gICAgICB0aGlzLnByb2Nlc3NOYW1lLFxuICAgICAgdGhpcy5jYWJhbEFyZ3MuY29uY2F0KGV4dHJhQXJncyksXG4gICAgICB0aGlzLnNwYXduT3B0cyxcbiAgICAgIHRoaXMub3B0cy5vcHRzLFxuICAgIClcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRpdGlvbmFsRW52U2V0dXAoZW52OiB0eXBlb2YgcHJvY2Vzcy5lbnYpOiB0eXBlb2YgcHJvY2Vzcy5lbnYge1xuICAgIHJldHVybiBlbnZcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U3Bhd25PcHRzKCkge1xuICAgIC8vIFNldHVwIGRlZmF1bHQgb3B0c1xuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICBjd2Q6IHRoaXMub3B0cy5jYWJhbFJvb3QuZ2V0UGF0aCgpLFxuICAgICAgZGV0YWNoZWQ6IHRydWUsXG4gICAgICBlbnY6IHt9LFxuICAgIH1cblxuICAgIGNvbnN0IGVudiA9IHsgLi4ucHJvY2Vzcy5lbnYgfVxuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiB0b3RhbGl0eS1jaGVja1xuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XG4gICAgICBjb25zdCBwYXRoOiBzdHJpbmdbXSA9IFtdXG4gICAgICBjb25zdCBjYXBNYXNrID0gKHN0cjogc3RyaW5nLCBtYXNrOiBudW1iZXIpID0+IHtcbiAgICAgICAgY29uc3QgYSA9IHN0ci5zcGxpdCgnJylcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1iaXR3aXNlXG4gICAgICAgICAgaWYgKG1hc2sgJiBNYXRoLnBvdygyLCBpKSkge1xuICAgICAgICAgICAgYVtpXSA9IGFbaV0udG9VcHBlckNhc2UoKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYS5qb2luKCcnKVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgbSA9IDBiMTExMTsgbSA+PSAwOyBtLS0pIHtcbiAgICAgICAgY29uc3Qgdm4gPSBjYXBNYXNrKCdwYXRoJywgbSlcbiAgICAgICAgY29uc3QgZXZuID0gZW52W3ZuXVxuICAgICAgICBpZiAoZXZuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwYXRoLnB1c2goZXZuKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbnYuUEFUSCA9IHBhdGguam9pbihkZWxpbWl0ZXIpXG4gICAgfVxuXG4gICAgb3B0cy5lbnYgPSB0aGlzLmFkZGl0aW9uYWxFbnZTZXR1cChlbnYpXG4gICAgcmV0dXJuIG9wdHNcbiAgfVxufVxuIl19