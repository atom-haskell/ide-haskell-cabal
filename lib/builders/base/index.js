"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const process_1 = require("./process");
const defaultGlobals = {
    process,
    runProcess: process_1.runProcess,
};
class BuilderBase {
    constructor(processName, opts, globals = {}) {
        this.processName = processName;
        this.opts = opts;
        this.globals = Object.assign(Object.assign({}, defaultGlobals), globals);
    }
    async runCommand(cmd) {
        return this[cmd]();
    }
    async runCabal(args, override = {}) {
        return this.globals.runProcess(this.processName, args, this.getSpawnOpts(), Object.assign(Object.assign({}, this.opts.params), override));
    }
    additionalEnvSetup(env) {
        return env;
    }
    getSpawnOpts() {
        const opts = {
            cwd: this.opts.cabalRoot.getPath(),
            detached: true,
            env: {},
        };
        const env = Object.assign({}, this.globals.process.env);
        if (this.globals.process.platform === 'win32') {
            const path = collectPathCapitalizations(env);
            env.PATH = path.join(path_1.delimiter);
        }
        opts.env = this.additionalEnvSetup(env);
        return opts;
    }
}
exports.BuilderBase = BuilderBase;
function collectPathCapitalizations(env) {
    const path = [];
    const capMask = (str, mask) => {
        const a = str.split('');
        for (let i = 0; i < a.length; i++) {
            if (mask & Math.pow(2, i)) {
                const j = a.length - i - 1;
                a[j] = a[j].toUpperCase();
            }
        }
        return a.join('');
    };
    for (let m = 0b1111; m >= 0; m--) {
        const vn = capMask('path', m);
        const evn = env[vn];
        if (evn !== undefined) {
            path.push(evn);
        }
    }
    return path;
}
exports.collectPathCapitalizations = collectPathCapitalizations;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUFnQztBQUloQyx1Q0FBK0M7QUFtQi9DLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLE9BQU87SUFDUCxVQUFVLEVBQVYsb0JBQVU7Q0FDWCxDQUFBO0FBRUQsTUFBc0IsV0FBVztJQUcvQixZQUNVLFdBQW1CLEVBQ1IsSUFBYyxFQUNqQyxVQUFrQixFQUFFO1FBRlosZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDUixTQUFJLEdBQUosSUFBSSxDQUFVO1FBR2pDLElBQUksQ0FBQyxPQUFPLG1DQUFRLGNBQWMsR0FBSyxPQUFPLENBQUUsQ0FBQTtJQUNsRCxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFpQjtRQUN2QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFBO0lBQ3BCLENBQUM7SUFRUyxLQUFLLENBQUMsUUFBUSxDQUN0QixJQUFjLEVBQ2QsV0FBNkIsRUFBRTtRQUUvQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUM1QixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLEVBQ0osSUFBSSxDQUFDLFlBQVksRUFBRSxrQ0FFZCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FDaEIsUUFBUSxFQUVkLENBQUE7SUFDSCxDQUFDO0lBRVMsa0JBQWtCLENBQUMsR0FBdUI7UUFDbEQsT0FBTyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRVMsWUFBWTtRQUVwQixNQUFNLElBQUksR0FBRztZQUNYLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDbEMsUUFBUSxFQUFFLElBQUk7WUFDZCxHQUFHLEVBQUUsRUFBMkM7U0FDakQsQ0FBQTtRQUVELE1BQU0sR0FBRyxxQkFBUSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUUsQ0FBQTtRQUczQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7WUFDN0MsTUFBTSxJQUFJLEdBQUcsMEJBQTBCLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDNUMsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFTLENBQUMsQ0FBQTtTQUNoQztRQUVELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3ZDLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQUNGO0FBM0RELGtDQTJEQztBQUVELFNBQWdCLDBCQUEwQixDQUFDLEdBQXVCO0lBQ2hFLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQTtJQUN6QixNQUFNLE9BQU8sR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtRQUM1QyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ3ZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBRWpDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQzFCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7YUFDMUI7U0FDRjtRQUNELE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUNuQixDQUFDLENBQUE7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ2hDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDN0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ25CLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1NBQ2Y7S0FDRjtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQztBQXJCRCxnRUFxQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWxpbWl0ZXIgfSBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgeyBDYWJhbENvbW1hbmQsIFRhcmdldFBhcmFtVHlwZUZvckJ1aWxkZXIgfSBmcm9tICcuLi8uLi9jb21tb24nXG5cbmltcG9ydCB7IHJ1blByb2Nlc3MsIElQYXJhbXMgfSBmcm9tICcuL3Byb2Nlc3MnXG5pbXBvcnQgeyBEaXJlY3RvcnkgfSBmcm9tICdhdG9tJ1xuZXhwb3J0IHsgSVBhcmFtcyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3Rvck9wdHMge1xuICByZWFkb25seSBwYXJhbXM6IElQYXJhbXNcbiAgcmVhZG9ubHkgdGFyZ2V0OiBUYXJnZXRQYXJhbVR5cGVGb3JCdWlsZGVyXG4gIHJlYWRvbmx5IGNhYmFsUm9vdDogRGlyZWN0b3J5XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVzdWx0VHlwZSB7XG4gIGV4aXRDb2RlOiBudW1iZXIgfCBudWxsXG4gIGhhc0Vycm9yOiBib29sZWFuXG59XG5cbmV4cG9ydCB0eXBlIEJ1aWxkZXIgPSBSZWNvcmQ8Q2FiYWxDb21tYW5kLCAoKSA9PiBQcm9taXNlPFJlc3VsdFR5cGU+PiAmIHtcbiAgcnVuQ29tbWFuZChjbWQ6IENhYmFsQ29tbWFuZCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbn1cblxuY29uc3QgZGVmYXVsdEdsb2JhbHMgPSB7XG4gIHByb2Nlc3MsXG4gIHJ1blByb2Nlc3MsXG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCdWlsZGVyQmFzZSBpbXBsZW1lbnRzIEJ1aWxkZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGdsb2JhbHM6IHR5cGVvZiBkZWZhdWx0R2xvYmFsc1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcHJvY2Vzc05hbWU6IHN0cmluZyxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgb3B0czogQ3Rvck9wdHMsXG4gICAgZ2xvYmFsczogb2JqZWN0ID0ge30sXG4gICkge1xuICAgIHRoaXMuZ2xvYmFscyA9IHsgLi4uZGVmYXVsdEdsb2JhbHMsIC4uLmdsb2JhbHMgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1bkNvbW1hbmQoY21kOiBDYWJhbENvbW1hbmQpOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gdGhpc1tjbWRdKClcbiAgfVxuXG4gIHB1YmxpYyBhYnN0cmFjdCBidWlsZCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG4gIHB1YmxpYyBhYnN0cmFjdCB0ZXN0KCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGJlbmNoKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGNsZWFuKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGRlcHMoKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuXG4gIHByb3RlY3RlZCBhc3luYyBydW5DYWJhbChcbiAgICBhcmdzOiBzdHJpbmdbXSxcbiAgICBvdmVycmlkZTogUGFydGlhbDxJUGFyYW1zPiA9IHt9LFxuICApOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gdGhpcy5nbG9iYWxzLnJ1blByb2Nlc3MoXG4gICAgICB0aGlzLnByb2Nlc3NOYW1lLFxuICAgICAgYXJncyxcbiAgICAgIHRoaXMuZ2V0U3Bhd25PcHRzKCksXG4gICAgICB7XG4gICAgICAgIC4uLnRoaXMub3B0cy5wYXJhbXMsXG4gICAgICAgIC4uLm92ZXJyaWRlLFxuICAgICAgfSxcbiAgICApXG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkaXRpb25hbEVudlNldHVwKGVudjogdHlwZW9mIHByb2Nlc3MuZW52KTogdHlwZW9mIHByb2Nlc3MuZW52IHtcbiAgICByZXR1cm4gZW52XG4gIH1cblxuICBwcm90ZWN0ZWQgZ2V0U3Bhd25PcHRzKCkge1xuICAgIC8vIFNldHVwIGRlZmF1bHQgb3B0c1xuICAgIGNvbnN0IG9wdHMgPSB7XG4gICAgICBjd2Q6IHRoaXMub3B0cy5jYWJhbFJvb3QuZ2V0UGF0aCgpLFxuICAgICAgZGV0YWNoZWQ6IHRydWUsXG4gICAgICBlbnY6IHt9IGFzIHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkIH0sXG4gICAgfVxuXG4gICAgY29uc3QgZW52ID0geyAuLi50aGlzLmdsb2JhbHMucHJvY2Vzcy5lbnYgfVxuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiB0b3RhbGl0eS1jaGVja1xuICAgIGlmICh0aGlzLmdsb2JhbHMucHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgY29uc3QgcGF0aCA9IGNvbGxlY3RQYXRoQ2FwaXRhbGl6YXRpb25zKGVudilcbiAgICAgIGVudi5QQVRIID0gcGF0aC5qb2luKGRlbGltaXRlcilcbiAgICB9XG5cbiAgICBvcHRzLmVudiA9IHRoaXMuYWRkaXRpb25hbEVudlNldHVwKGVudilcbiAgICByZXR1cm4gb3B0c1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2xsZWN0UGF0aENhcGl0YWxpemF0aW9ucyhlbnY6IHR5cGVvZiBwcm9jZXNzLmVudikge1xuICBjb25zdCBwYXRoOiBzdHJpbmdbXSA9IFtdXG4gIGNvbnN0IGNhcE1hc2sgPSAoc3RyOiBzdHJpbmcsIG1hc2s6IG51bWJlcikgPT4ge1xuICAgIGNvbnN0IGEgPSBzdHIuc3BsaXQoJycpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWJpdHdpc2VcbiAgICAgIGlmIChtYXNrICYgTWF0aC5wb3coMiwgaSkpIHtcbiAgICAgICAgY29uc3QgaiA9IGEubGVuZ3RoIC0gaSAtIDFcbiAgICAgICAgYVtqXSA9IGFbal0udG9VcHBlckNhc2UoKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYS5qb2luKCcnKVxuICB9XG4gIGZvciAobGV0IG0gPSAwYjExMTE7IG0gPj0gMDsgbS0tKSB7XG4gICAgY29uc3Qgdm4gPSBjYXBNYXNrKCdwYXRoJywgbSlcbiAgICBjb25zdCBldm4gPSBlbnZbdm5dXG4gICAgaWYgKGV2biAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXRoLnB1c2goZXZuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aFxufVxuIl19