"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const process_1 = require("process");
const path = require("path");
const os_1 = require("os");
const atom_1 = require("atom");
class CabalProcess {
    constructor(command, args, options, params) {
        this.params = params;
        this.cwd = new atom_1.Directory(options.cwd || '.');
        this.running = true;
        this.hasError = false;
        const proc = child_process.spawn(command, args, options);
        const buffered = (handleOutput) => {
            let buffer = '';
            return (data) => {
                const output = data.toString('utf8');
                const [first, ...tail] = output.split(os_1.EOL);
                buffer += first;
                if (tail.length > 0) {
                    const lines = [buffer, ...(tail.slice(0, -1))];
                    buffer = tail.slice(-1)[0];
                    handleOutput(lines);
                }
            };
        };
        const blockBuffered = (handleOutput) => {
            const startOfMessage = /\n(?=\S)/g;
            let buffer = [];
            proc.on('close', () => handleOutput(buffer.join('\n')));
            return buffered((lines) => {
                buffer.push(...lines);
                const [first, ...tail] = buffer.join('\n').split(startOfMessage);
                if (tail.length > 0) {
                    const last = tail.slice(-1)[0];
                    buffer = last.split('\n');
                    for (const block of [first, ...(tail.slice(0, -1))]) {
                        handleOutput(block);
                    }
                }
            });
        };
        if (this.params.setCancelAction) {
            this.params.setCancelAction(() => {
                try {
                    process_1.kill(-proc.pid);
                }
                catch (e) { }
                try {
                    process_1.kill(proc.pid);
                }
                catch (e) { }
                try {
                    proc.kill();
                }
                catch (e) { }
            });
        }
        const handleMessage = (msg) => {
            this.checkProgress(msg);
            this.checkSeverityChange(msg);
            const parsed = this.parseMessage(msg);
            if (parsed && this.params.onMsg) {
                this.params.onMsg(parsed);
            }
        };
        proc.stdout.on('data', blockBuffered(handleMessage));
        proc.stderr.on('data', blockBuffered(handleMessage));
        proc.on('close', (exitCode, signal) => {
            if (this.params.onDone) {
                this.params.onDone({ exitCode, hasError: this.hasError });
            }
            this.running = false;
        });
    }
    unindentMessage(lines) {
        const minIndent = Math.min(...(lines.map((line) => {
            const match = line.match(/^\s*/);
            if (match) {
                return match[0].length;
            }
            else {
                return 0;
            }
        })));
        return lines.map((line) => line.slice(minIndent)).join('\n');
    }
    parseMessage(raw) {
        if (raw.trim() !== '') {
            const matchLoc = /^(.+):(\d+):(\d+):(?: (\w+):)?[ \t]*(\[[^\]]+\])?[ \t]*\n?([^]*)/;
            const matched = raw.trimRight().match(matchLoc);
            if (matched) {
                this.hasError = true;
                const [file, line, col, rawTyp, context, msg] = matched.slice(1);
                const typ = rawTyp ? rawTyp.toLowerCase() : 'error';
                return {
                    uri: path.isAbsolute(file) ? file : this.cwd.getFile(file).getPath(),
                    position: new atom_1.Point(parseInt(line, 10) - 1, parseInt(col, 10) - 1),
                    context,
                    message: {
                        text: this.unindentMessage(msg.split('\n')),
                        highlighter: 'hint.message.haskell',
                    },
                    severity: typ,
                };
            }
            else {
                return {
                    message: raw,
                    severity: this.params.severity,
                };
            }
        }
    }
    checkSeverityChange(data) {
        if (!this.params.severityChangeRx) {
            return;
        }
        for (const [sev, rx] of Object.entries(this.params.severityChangeRx)) {
            if (data.match(rx)) {
                this.params.severity = sev;
                break;
            }
        }
    }
    checkProgress(data) {
        const match = data.match(/\[\s*([\d]+)\s+of\s+([\d]+)\s*\]/);
        if (match) {
            const progress = match[1];
            const total = match[2];
            this.params.onProgress && this.params.onProgress(parseInt(progress, 10) / parseInt(total, 10));
        }
    }
}
function runCabalProcess(command, args, options, pars) {
    return __awaiter(this, void 0, void 0, function* () {
        const newPars = Object.assign({}, pars);
        return new Promise((resolve) => {
            newPars.onDone = resolve;
            new CabalProcess(command, args, options, newPars);
        });
    });
}
exports.runCabalProcess = runCabalProcess;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FiYWwtcHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9jYWJhbC1wcm9jZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSwrQ0FBOEM7QUFDOUMscUNBQThCO0FBQzlCLDZCQUE0QjtBQUM1QiwyQkFBd0I7QUFHeEIsK0JBQXVDO0FBV3ZDO0lBS0UsWUFBWSxPQUFlLEVBQUUsSUFBYyxFQUFFLE9BQW1DLEVBQVUsTUFBZTtRQUFmLFdBQU0sR0FBTixNQUFNLENBQVM7UUFDdkcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGdCQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQTtRQUM1QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTtRQU1uQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQTtRQUNyQixNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFFeEQsTUFBTSxRQUFRLEdBQUcsQ0FBQyxZQUF1QztZQUN2RCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7WUFDZixNQUFNLENBQUMsQ0FBQyxJQUFZO2dCQUNsQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2dCQUNwQyxNQUFNLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFHLENBQUMsQ0FBQTtnQkFHMUMsTUFBTSxJQUFJLEtBQUssQ0FBQTtnQkFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3BCLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFD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bUMsRUFBRSxJQUFhOztRQUVuRixNQUFNLE9BQU8scUJBQWlCLElBQUksQ0FBRSxDQUFBO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBMEMsQ0FBQyxPQUFPO1lBQ2xFLE9BQU8sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFBO1lBRXhCLElBQUksWUFBWSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ25ELENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUFBO0FBVEQsMENBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjaGlsZF9wcm9jZXNzIGZyb20gJ2NoaWxkX3Byb2Nlc3MnXG5pbXBvcnQgeyBraWxsIH0gZnJvbSAncHJvY2VzcydcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCB7IEVPTCB9IGZyb20gJ29zJ1xuXG4vLyAvLyBBdG9tIGRlcGVuZGVuY2llc1xuaW1wb3J0IHsgRGlyZWN0b3J5LCBQb2ludCB9IGZyb20gJ2F0b20nXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhcmFtcyB7XG4gIG9uTXNnPzogKG1zZzogVVBJLklSZXN1bHRJdGVtKSA9PiB2b2lkXG4gIG9uUHJvZ3Jlc3M/OiAocHJvZ3Jlc3M6IG51bWJlcikgPT4gdm9pZFxuICBvbkRvbmU/OiAoZG9uZTogeyBleGl0Q29kZTogbnVtYmVyLCBoYXNFcnJvcjogYm9vbGVhbiB9KSA9PiB2b2lkXG4gIHNldENhbmNlbEFjdGlvbj86IChhY3Rpb246ICgpID0+IHZvaWQpID0+IHZvaWRcbiAgc2V2ZXJpdHk6IFVQSS5UU2V2ZXJpdHlcbiAgc2V2ZXJpdHlDaGFuZ2VSeD86IHtbSyBpbiBVUEkuVFNldmVyaXR5XTogUmVnRXhwIH1cbn1cblxuY2xhc3MgQ2FiYWxQcm9jZXNzIHtcbiAgcHJpdmF0ZSBjd2Q6IERpcmVjdG9yeVxuICBwcml2YXRlIHJ1bm5pbmc6IGJvb2xlYW5cbiAgcHJpdmF0ZSBoYXNFcnJvcjogYm9vbGVhblxuXG4gIGNvbnN0cnVjdG9yKGNvbW1hbmQ6IHN0cmluZywgYXJnczogc3RyaW5nW10sIG9wdGlvbnM6IGNoaWxkX3Byb2Nlc3MuU3Bhd25PcHRpb25zLCBwcml2YXRlIHBhcmFtczogSVBhcmFtcykge1xuICAgIHRoaXMuY3dkID0gbmV3IERpcmVjdG9yeShvcHRpb25zLmN3ZCB8fCAnLicpXG4gICAgdGhpcy5ydW5uaW5nID0gdHJ1ZVxuICAgIC8vIGNhYmFsIHJldHVybnMgZmFpbHVyZSB3aGVuIHRoZXJlIGFyZSB0eXBlIGVycm9ycyBfb3JfIHdoZW4gaXQgY2FuJ3RcbiAgICAvLyBjb21waWxlIHRoZSBjb2RlIGF0IGFsbCAoaS5lLiwgd2hlbiB0aGVyZSBhcmUgbWlzc2luZyBkZXBlbmRlbmNpZXMpLlxuICAgIC8vIFNpbmNlIGl0J3MgaGFyZCB0byBkaXN0aW5ndWlzaCBiZXR3ZWVuIHRoZXNlIHR3bywgd2UgbG9vayBhdCB0aGVcbiAgICAvLyBwYXJzZWQgZXJyb3JzO1xuICAgIC8vIHRoaXMuaGFzRXJyb3IgaXMgc2V0IGlmIHdlIGZpbmQgYW4gZXJyb3Ivd2FybmluZywgc2VlIHBhcnNlTWVzc2FnZVxuICAgIHRoaXMuaGFzRXJyb3IgPSBmYWxzZVxuICAgIGNvbnN0IHByb2MgPSBjaGlsZF9wcm9jZXNzLnNwYXduKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpXG5cbiAgICBjb25zdCBidWZmZXJlZCA9IChoYW5kbGVPdXRwdXQ6IChsaW5lczogc3RyaW5nW10pID0+IHZvaWQpID0+IHtcbiAgICAgIGxldCBidWZmZXIgPSAnJ1xuICAgICAgcmV0dXJuIChkYXRhOiBCdWZmZXIpID0+IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gZGF0YS50b1N0cmluZygndXRmOCcpXG4gICAgICAgIGNvbnN0IFtmaXJzdCwgLi4udGFpbF0gPSBvdXRwdXQuc3BsaXQoRU9MKVxuICAgICAgICAvLyBeIFRoZSBvbmx5IHBsYWNlIHdoZXJlIHdlIGdldCBvcy1zcGVjaWZpYyBFT0wgKENSL0NSTEYvTEYpXG4gICAgICAgIC8vIGluIHRoZSByZXN0IG9mIHRoZSBjb2RlIHdlJ3JlIHVzaW5nIGp1c3QgTEYgKFxcbilcbiAgICAgICAgYnVmZmVyICs9IGZpcnN0XG4gICAgICAgIGlmICh0YWlsLmxlbmd0aCA+IDApIHsgLy8gaXQgbWVhbnMgdGhlcmUncyBhdCBsZWFzdCBvbmUgbmV3bGluZVxuICAgICAgICAgIGNvbnN0IGxpbmVzID0gW2J1ZmZlciwgLi4uKHRhaWwuc2xpY2UoMCwgLTEpKV1cbiAgICAgICAgICBidWZmZXIgPSB0YWlsLnNsaWNlKC0xKVswXVxuICAgICAgICAgIGhhbmRsZU91dHB1dChsaW5lcylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGJsb2NrQnVmZmVyZWQgPSAoaGFuZGxlT3V0cHV0OiAoYmxvY2s6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xuICAgICAgLy8gU3RhcnQgb2YgYSBDYWJhbCBtZXNzYWdlXG4gICAgICBjb25zdCBzdGFydE9mTWVzc2FnZSA9IC9cXG4oPz1cXFMpL2dcbiAgICAgIGxldCBidWZmZXI6IHN0cmluZ1tdID0gW11cbiAgICAgIHByb2Mub24oJ2Nsb3NlJywgKCkgPT4gaGFuZGxlT3V0cHV0KGJ1ZmZlci5qb2luKCdcXG4nKSkpXG4gICAgICByZXR1cm4gYnVmZmVyZWQoKGxpbmVzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICBidWZmZXIucHVzaCguLi5saW5lcylcbiAgICAgICAgLy8gQ291bGQgaXRlcmF0ZSBvdmVyIGxpbmVzIGhlcmUsIGJ1dCB0aGlzIGlzIGVhc2llciwgaWYgbm90IGFzIGVmZmVjdGl2ZVxuICAgICAgICBjb25zdCBbZmlyc3QsIC4uLnRhaWxdID0gYnVmZmVyLmpvaW4oJ1xcbicpLnNwbGl0KHN0YXJ0T2ZNZXNzYWdlKVxuICAgICAgICBpZiAodGFpbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY29uc3QgbGFzdCA9IHRhaWwuc2xpY2UoLTEpWzBdXG4gICAgICAgICAgYnVmZmVyID0gbGFzdC5zcGxpdCgnXFxuJylcbiAgICAgICAgICBmb3IgKGNvbnN0IGJsb2NrIG9mIFtmaXJzdCwgLi4uKHRhaWwuc2xpY2UoMCwgLTEpKV0pIHtcbiAgICAgICAgICAgIGhhbmRsZU91dHB1dChibG9jaylcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGFyYW1zLnNldENhbmNlbEFjdGlvbikge1xuICAgICAgdGhpcy5wYXJhbXMuc2V0Q2FuY2VsQWN0aW9uKCgpID0+IHtcbiAgICAgICAgdHJ5IHsga2lsbCgtcHJvYy5waWQpIH0gY2F0Y2ggKGUpIHsgLypub29wKi8gfVxuICAgICAgICB0cnkgeyBraWxsKHByb2MucGlkKSB9IGNhdGNoIChlKSB7IC8qbm9vcCovIH1cbiAgICAgICAgdHJ5IHsgcHJvYy5raWxsKCkgfSBjYXRjaCAoZSkgeyAvKm5vb3AqLyB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZU1lc3NhZ2UgPSAobXNnOiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMuY2hlY2tQcm9ncmVzcyhtc2cpXG4gICAgICB0aGlzLmNoZWNrU2V2ZXJpdHlDaGFuZ2UobXNnKVxuICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5wYXJzZU1lc3NhZ2UobXNnKVxuICAgICAgaWYgKHBhcnNlZCAmJiB0aGlzLnBhcmFtcy5vbk1zZykge1xuICAgICAgICB0aGlzLnBhcmFtcy5vbk1zZyhwYXJzZWQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gTm90ZTogYmxvY2tCdWZmZXJlZCB1c2VkIHR3aWNlIGJlY2F1c2Ugd2UgbmVlZCBzZXBhcmF0ZSBidWZmZXJzXG4gICAgLy8gZm9yIHN0ZGVyciBhbmQgc3Rkb3V0XG4gICAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCBibG9ja0J1ZmZlcmVkKGhhbmRsZU1lc3NhZ2UpKVxuICAgIHByb2Muc3RkZXJyLm9uKCdkYXRhJywgYmxvY2tCdWZmZXJlZChoYW5kbGVNZXNzYWdlKSlcblxuICAgIHByb2Mub24oJ2Nsb3NlJywgKGV4aXRDb2RlLCBzaWduYWwpID0+IHtcbiAgICAgIGlmICh0aGlzLnBhcmFtcy5vbkRvbmUpIHsgdGhpcy5wYXJhbXMub25Eb25lKHsgZXhpdENvZGUsIGhhc0Vycm9yOiB0aGlzLmhhc0Vycm9yIH0pIH1cbiAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlXG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgdW5pbmRlbnRNZXNzYWdlKGxpbmVzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IG1pbkluZGVudCA9IE1hdGgubWluKC4uLihsaW5lcy5tYXAoKGxpbmUpID0+IHtcbiAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvXlxccyovKVxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiBtYXRjaFswXS5sZW5ndGhcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgfSkpKVxuICAgIHJldHVybiBsaW5lcy5tYXAoKGxpbmUpID0+IGxpbmUuc2xpY2UobWluSW5kZW50KSkuam9pbignXFxuJylcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VNZXNzYWdlKHJhdzogc3RyaW5nKSB7XG4gICAgaWYgKHJhdy50cmltKCkgIT09ICcnKSB7XG4gICAgICBjb25zdCBtYXRjaExvYyA9IC9eKC4rKTooXFxkKyk6KFxcZCspOig/OiAoXFx3Kyk6KT9bIFxcdF0qKFxcW1teXFxdXStcXF0pP1sgXFx0XSpcXG4/KFteXSopL1xuICAgICAgY29uc3QgbWF0Y2hlZCA9IChyYXcgYXMgYW55KS50cmltUmlnaHQoKS5tYXRjaChtYXRjaExvYylcbiAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgIHRoaXMuaGFzRXJyb3IgPSB0cnVlXG5cbiAgICAgICAgY29uc3QgW2ZpbGUsIGxpbmUsIGNvbCwgcmF3VHlwLCBjb250ZXh0LCBtc2ddID0gbWF0Y2hlZC5zbGljZSgxKVxuICAgICAgICBjb25zdCB0eXAgPSByYXdUeXAgPyByYXdUeXAudG9Mb3dlckNhc2UoKSA6ICdlcnJvcidcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVyaTogcGF0aC5pc0Fic29sdXRlKGZpbGUpID8gZmlsZSA6IHRoaXMuY3dkLmdldEZpbGUoZmlsZSkuZ2V0UGF0aCgpLFxuICAgICAgICAgIHBvc2l0aW9uOiBuZXcgUG9pbnQocGFyc2VJbnQobGluZSwgMTApIC0gMSwgcGFyc2VJbnQoY29sLCAxMCkgLSAxKSxcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICAgIHRleHQ6IHRoaXMudW5pbmRlbnRNZXNzYWdlKG1zZy5zcGxpdCgnXFxuJykpLFxuICAgICAgICAgICAgaGlnaGxpZ2h0ZXI6ICdoaW50Lm1lc3NhZ2UuaGFza2VsbCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXZlcml0eTogdHlwLFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2U6IHJhdyxcbiAgICAgICAgICBzZXZlcml0eTogdGhpcy5wYXJhbXMuc2V2ZXJpdHksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrU2V2ZXJpdHlDaGFuZ2UoZGF0YTogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGlzLnBhcmFtcy5zZXZlcml0eUNoYW5nZVJ4KSB7IHJldHVybiB9XG4gICAgZm9yIChjb25zdCBbc2V2LCByeF0gb2YgT2JqZWN0LmVudHJpZXModGhpcy5wYXJhbXMuc2V2ZXJpdHlDaGFuZ2VSeCkpIHtcbiAgICAgIGlmIChkYXRhLm1hdGNoKHJ4KSkge1xuICAgICAgICB0aGlzLnBhcmFtcy5zZXZlcml0eSA9IHNldlxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tQcm9ncmVzcyhkYXRhOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtYXRjaCA9IGRhdGEubWF0Y2goL1xcW1xccyooW1xcZF0rKVxccytvZlxccysoW1xcZF0rKVxccypcXF0vKVxuICAgIGlmIChtYXRjaCkge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBtYXRjaFsxXVxuICAgICAgY29uc3QgdG90YWwgPSBtYXRjaFsyXVxuICAgICAgdGhpcy5wYXJhbXMub25Qcm9ncmVzcyAmJiB0aGlzLnBhcmFtcy5vblByb2dyZXNzKHBhcnNlSW50KHByb2dyZXNzLCAxMCkgLyBwYXJzZUludCh0b3RhbCwgMTApKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuQ2FiYWxQcm9jZXNzKFxuICBjb21tYW5kOiBzdHJpbmcsIGFyZ3M6IHN0cmluZ1tdLCBvcHRpb25zOiBjaGlsZF9wcm9jZXNzLlNwYXduT3B0aW9ucywgcGFyczogSVBhcmFtcyxcbikge1xuICBjb25zdCBuZXdQYXJzOiBJUGFyYW1zID0geyAuLi5wYXJzIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlPHsgZXhpdENvZGU6IG51bWJlciwgaGFzRXJyb3I6IGJvb2xlYW4gfT4oKHJlc29sdmUpID0+IHtcbiAgICBuZXdQYXJzLm9uRG9uZSA9IHJlc29sdmVcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXVudXNlZC1leHByZXNzaW9uXG4gICAgbmV3IENhYmFsUHJvY2Vzcyhjb21tYW5kLCBhcmdzLCBvcHRpb25zLCBuZXdQYXJzKVxuICB9KVxufVxuIl19