"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process = require("child_process");
const process_1 = require("process");
const path = require("path");
const os_1 = require("os");
const atom_1 = require("atom");
class CabalProcess {
    constructor(command, args, options, params) {
        this.params = params;
        this.cwd = new atom_1.Directory(options.cwd || '.');
        this.running = true;
        this.hasError = false;
        const proc = child_process.spawn(command, args, options);
        const buffered = (handleOutput) => {
            let buffer = '';
            return (data) => {
                const output = data.toString('utf8');
                const [first, ...tail] = output.split(os_1.EOL);
                buffer += first;
                if (tail.length > 0) {
                    const lines = [buffer, ...(tail.slice(0, -1))];
                    buffer = tail.slice(-1)[0];
                    handleOutput(lines);
                }
            };
        };
        const blockBuffered = (handleOutput) => {
            const startOfMessage = /\n(?=\S)/g;
            let buffer = [];
            proc.on('close', () => handleOutput(buffer.join('\n')));
            return buffered((lines) => {
                buffer.push(...lines);
                const [first, ...tail] = buffer.join('\n').split(startOfMessage);
                if (tail.length > 0) {
                    const last = tail.slice(-1)[0];
                    buffer = last.split('\n');
                    for (const block of [first, ...(tail.slice(0, -1))]) {
                        handleOutput(block);
                    }
                }
            });
        };
        if (this.params.setCancelAction) {
            this.params.setCancelAction(() => {
                try {
                    process_1.kill(-proc.pid);
                }
                catch (e) { }
                try {
                    process_1.kill(proc.pid);
                }
                catch (e) { }
                try {
                    proc.kill();
                }
                catch (e) { }
            });
        }
        const handleMessage = (msg) => {
            this.checkProgress(msg);
            this.checkSeverityChange(msg);
            const parsed = this.parseMessage(msg);
            if (parsed && this.params.onMsg) {
                this.params.onMsg(parsed);
            }
        };
        proc.stdout.on('data', blockBuffered(handleMessage));
        proc.stderr.on('data', blockBuffered(handleMessage));
        proc.on('close', (exitCode, signal) => {
            if (this.params.onDone) {
                this.params.onDone({ exitCode, hasError: this.hasError });
            }
            this.running = false;
        });
    }
    unindentMessage(lines) {
        const minIndent = Math.min(...(lines.map((line) => {
            const match = line.match(/^\s*/);
            if (match) {
                return match[0].length;
            }
            else {
                return 0;
            }
        })));
        return lines.map((line) => line.slice(minIndent)).join('\n');
    }
    parseMessage(raw) {
        if (raw.trim() !== '') {
            const matchLoc = /^(.+):(\d+):(\d+):(?: (\w+):)?[ \t]*(\[[^\]]+\])?[ \t]*\n?([^]*)/;
            const matched = raw.trimRight().match(matchLoc);
            if (matched) {
                this.hasError = true;
                const [file, line, col, rawTyp, context, msg] = matched.slice(1);
                const typ = rawTyp ? rawTyp.toLowerCase() : 'error';
                return {
                    uri: path.isAbsolute(file) ? file : this.cwd.getFile(file).getPath(),
                    position: new atom_1.Point(parseInt(line, 10) - 1, parseInt(col, 10) - 1),
                    context,
                    message: {
                        text: this.unindentMessage(msg.split('\n')),
                        highlighter: 'hint.message.haskell'
                    },
                    severity: typ
                };
            }
            else {
                return {
                    message: raw,
                    severity: this.params.severity
                };
            }
        }
    }
    checkSeverityChange(data) {
        if (!this.params.severityChangeRx) {
            return;
        }
        for (const [sev, rx] of Object.entries(this.params.severityChangeRx)) {
            if (data.match(rx)) {
                this.params.severity = sev;
                break;
            }
        }
    }
    checkProgress(data) {
        const match = data.match(/\[\s*([\d]+)\s+of\s+([\d]+)\s*\]/);
        if (match) {
            const progress = match[1], total = match[2];
            this.params.onProgress && this.params.onProgress(parseInt(progress, 10) / parseInt(total, 10));
        }
    }
}
function runCabalProcess(command, args, options, pars) {
    return __awaiter(this, void 0, void 0, function* () {
        const newPars = Object.assign({}, pars);
        return new Promise((resolve) => {
            newPars.onDone = resolve;
            new CabalProcess(command, args, options, newPars);
        });
    });
}
exports.runCabalProcess = runCabalProcess;
//# sourceMappingURL=data:application/json;base64,