"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const cabal_process_1 = require("./cabal-process");
class BuilderBase {
    constructor(processName, opts) {
        this.processName = processName;
        this.opts = opts;
        this.spawnOpts = this.getSpawnOpts();
        this.cabalArgs = [];
    }
    async runCommand(cmd) {
        return this[cmd]();
    }
    async runCabal(extraArgs = []) {
        return cabal_process_1.runCabalProcess(this.processName, this.cabalArgs.concat(extraArgs), this.spawnOpts, this.opts.opts);
    }
    additionalEnvSetup(env) {
        return env;
    }
    getSpawnOpts() {
        const opts = {
            cwd: this.opts.cabalRoot.getPath(),
            detached: true,
            env: {},
        };
        const env = Object.assign({}, process.env);
        if (process.platform === 'win32') {
            const path = [];
            const capMask = (str, mask) => {
                const a = str.split('');
                for (let i = 0; i < a.length; i++) {
                    if (mask & Math.pow(2, i)) {
                        a[i] = a[i].toUpperCase();
                    }
                }
                return a.join('');
            };
            for (let m = 0b1111; m >= 0; m--) {
                const vn = capMask('path', m);
                const evn = env[vn];
                if (evn !== undefined) {
                    path.push(evn);
                }
            }
            env.PATH = path.join(path_1.delimiter);
        }
        opts.env = this.additionalEnvSetup(env);
        return opts;
    }
}
exports.BuilderBase = BuilderBase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9idWlsZGVycy9iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQWdDO0FBSWhDLG1EQUEwRDtBQW1CMUQ7SUFRRSxZQUFvQixXQUFtQixFQUFZLElBQWM7UUFBN0MsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFVO1FBQy9ELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ3BDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQWlCO1FBQ3ZDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQTtJQUNwQixDQUFDO0lBUVMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFzQixFQUFFO1FBQy9DLE1BQU0sQ0FBQywrQkFBZSxDQUNwQixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDaEMsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FDZixDQUFBO0lBQ0gsQ0FBQztJQUVTLGtCQUFrQixDQUFDLEdBQXVCO1FBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUE7SUFDWixDQUFDO0lBRU8sWUFBWTtRQUVsQixNQUFNLElBQUksR0FBRztZQUNYLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDbEMsUUFBUSxFQUFFLElBQUk7WUFDZCxHQUFHLEVBQUUsRUFBRTtTQUNSLENBQUE7UUFFRCxNQUFNLEdBQUcscUJBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBRSxDQUFBO1FBRzlCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLElBQUksR0FBYSxFQUFFLENBQUE7WUFDekIsTUFBTSxPQUFPLEdBQUcsQ0FBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEVBQUU7Z0JBQzVDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7Z0JBQ3ZCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO29CQUVsQyxFQUFFLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMxQixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO29CQUMzQixDQUFDO2dCQUNILENBQUM7Z0JBQ0QsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDbkIsQ0FBQyxDQUFBO1lBQ0QsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDakMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtnQkFDN0IsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNuQixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtnQkFDaEIsQ0FBQztZQUNILENBQUM7WUFDRCxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQVMsQ0FBQyxDQUFBO1FBQ2pDLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFBO0lBQ2IsQ0FBQztDQUNGO0FBeEVELGtDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlbGltaXRlciB9IGZyb20gJ3BhdGgnXG5cbmltcG9ydCB7IENhYmFsQ29tbWFuZCwgVGFyZ2V0UGFyYW1UeXBlRm9yQnVpbGRlciB9IGZyb20gJy4vLi4vY29tbW9uJ1xuXG5pbXBvcnQgeyBydW5DYWJhbFByb2Nlc3MsIElQYXJhbXMgfSBmcm9tICcuL2NhYmFsLXByb2Nlc3MnXG5pbXBvcnQgeyBEaXJlY3RvcnkgfSBmcm9tICdhdG9tJ1xuZXhwb3J0IHsgSVBhcmFtcyB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3Rvck9wdHMge1xuICBvcHRzOiBJUGFyYW1zXG4gIHRhcmdldDogVGFyZ2V0UGFyYW1UeXBlRm9yQnVpbGRlclxuICBjYWJhbFJvb3Q6IERpcmVjdG9yeVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdFR5cGUge1xuICBleGl0Q29kZTogbnVtYmVyIHwgbnVsbFxuICBoYXNFcnJvcjogYm9vbGVhblxufVxuXG5leHBvcnQgdHlwZSBUQnVpbGRlckJhc2UgPSBSZWNvcmQ8Q2FiYWxDb21tYW5kLCAoKSA9PiBQcm9taXNlPFJlc3VsdFR5cGU+PiAmIHtcbiAgcnVuQ29tbWFuZChjbWQ6IENhYmFsQ29tbWFuZCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJ1aWxkZXJCYXNlIGltcGxlbWVudHMgVEJ1aWxkZXJCYXNlIHtcbiAgcHJvdGVjdGVkIGNhYmFsQXJnczogc3RyaW5nW11cbiAgcHJvdGVjdGVkIHNwYXduT3B0czoge1xuICAgIGN3ZDogc3RyaW5nXG4gICAgZGV0YWNoZWQ6IGJvb2xlYW5cbiAgICBlbnY6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJvY2Vzc05hbWU6IHN0cmluZywgcHJvdGVjdGVkIG9wdHM6IEN0b3JPcHRzKSB7XG4gICAgdGhpcy5zcGF3bk9wdHMgPSB0aGlzLmdldFNwYXduT3B0cygpXG4gICAgdGhpcy5jYWJhbEFyZ3MgPSBbXVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHJ1bkNvbW1hbmQoY21kOiBDYWJhbENvbW1hbmQpOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gdGhpc1tjbWRdKClcbiAgfVxuXG4gIHB1YmxpYyBhYnN0cmFjdCBidWlsZCgpOiBQcm9taXNlPFJlc3VsdFR5cGU+XG4gIHB1YmxpYyBhYnN0cmFjdCB0ZXN0KCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGJlbmNoKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGNsZWFuKCk6IFByb21pc2U8UmVzdWx0VHlwZT5cbiAgcHVibGljIGFic3RyYWN0IGRlcHMoKTogUHJvbWlzZTxSZXN1bHRUeXBlPlxuXG4gIHByb3RlY3RlZCBhc3luYyBydW5DYWJhbChleHRyYUFyZ3M6IHN0cmluZ1tdID0gW10pOiBQcm9taXNlPFJlc3VsdFR5cGU+IHtcbiAgICByZXR1cm4gcnVuQ2FiYWxQcm9jZXNzKFxuICAgICAgdGhpcy5wcm9jZXNzTmFtZSxcbiAgICAgIHRoaXMuY2FiYWxBcmdzLmNvbmNhdChleHRyYUFyZ3MpLFxuICAgICAgdGhpcy5zcGF3bk9wdHMsXG4gICAgICB0aGlzLm9wdHMub3B0cyxcbiAgICApXG4gIH1cblxuICBwcm90ZWN0ZWQgYWRkaXRpb25hbEVudlNldHVwKGVudjogdHlwZW9mIHByb2Nlc3MuZW52KTogdHlwZW9mIHByb2Nlc3MuZW52IHtcbiAgICByZXR1cm4gZW52XG4gIH1cblxuICBwcml2YXRlIGdldFNwYXduT3B0cygpIHtcbiAgICAvLyBTZXR1cCBkZWZhdWx0IG9wdHNcbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgY3dkOiB0aGlzLm9wdHMuY2FiYWxSb290LmdldFBhdGgoKSxcbiAgICAgIGRldGFjaGVkOiB0cnVlLFxuICAgICAgZW52OiB7fSxcbiAgICB9XG5cbiAgICBjb25zdCBlbnYgPSB7IC4uLnByb2Nlc3MuZW52IH1cblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogdG90YWxpdHktY2hlY2tcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ3dpbjMyJykge1xuICAgICAgY29uc3QgcGF0aDogc3RyaW5nW10gPSBbXVxuICAgICAgY29uc3QgY2FwTWFzayA9IChzdHI6IHN0cmluZywgbWFzazogbnVtYmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGEgPSBzdHIuc3BsaXQoJycpXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYml0d2lzZVxuICAgICAgICAgIGlmIChtYXNrICYgTWF0aC5wb3coMiwgaSkpIHtcbiAgICAgICAgICAgIGFbaV0gPSBhW2ldLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEuam9pbignJylcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IG0gPSAwYjExMTE7IG0gPj0gMDsgbS0tKSB7XG4gICAgICAgIGNvbnN0IHZuID0gY2FwTWFzaygncGF0aCcsIG0pXG4gICAgICAgIGNvbnN0IGV2biA9IGVudlt2bl1cbiAgICAgICAgaWYgKGV2biAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcGF0aC5wdXNoKGV2bilcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZW52LlBBVEggPSBwYXRoLmpvaW4oZGVsaW1pdGVyKVxuICAgIH1cblxuICAgIG9wdHMuZW52ID0gdGhpcy5hZGRpdGlvbmFsRW52U2V0dXAoZW52KVxuICAgIHJldHVybiBvcHRzXG4gIH1cbn1cbiJdfQ==