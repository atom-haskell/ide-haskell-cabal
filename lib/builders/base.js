"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const cabal_process_1 = require("./cabal-process");
class BuilderBase {
    constructor(processName, opts) {
        this.processName = processName;
        this.opts = opts;
        this.spawnOpts = this.getSpawnOpts();
        this.cabalArgs = [];
    }
    async runCommand(cmd) {
        return this[cmd]();
    }
    async runCabal(extraArgs = []) {
        return cabal_process_1.runCabalProcess(this.processName, this.cabalArgs.concat(extraArgs), this.spawnOpts, this.opts.opts);
    }
    getConfigOpt(opt) {
        const map = {
            '7.2': atom.config.get('ide-haskell-cabal.cabal.ghc702'),
            '7.4': atom.config.get('ide-haskell-cabal.cabal.ghc704'),
            '7.6': atom.config.get('ide-haskell-cabal.cabal.ghc706'),
            '7.8': atom.config.get('ide-haskell-cabal.cabal.ghc708'),
            '7.10': atom.config.get('ide-haskell-cabal.cabal.ghc710'),
            '8.0': atom.config.get('ide-haskell-cabal.cabal.ghc800'),
        };
        return map[atom.config.get('ide-haskell-cabal.cabal.activeGhcVersion')][opt];
    }
    getSpawnOpts() {
        const opts = {
            cwd: this.opts.cabalRoot.getPath(),
            detached: true,
            env: {},
        };
        const env = Object.assign({}, process.env);
        if (process.platform === 'win32') {
            const path = [];
            const capMask = (str, mask) => {
                const a = str.split('');
                for (let i = 0; i < a.length; i++) {
                    if (mask & Math.pow(2, i)) {
                        a[i] = a[i].toUpperCase();
                    }
                }
                return a.join('');
            };
            for (let m = 0b1111; m >= 0; m--) {
                const vn = capMask('path', m);
                const evn = env[vn];
                if (evn !== undefined) {
                    path.push(evn);
                }
            }
            env['PATH'] = path.join(path_1.delimiter);
        }
        const ghcPath = this.getConfigOpt('pathTo');
        if (this.getConfigOpt('pathExclusive')) {
            env['PATH'] = ghcPath.join(path_1.delimiter);
        }
        else if (ghcPath) {
            env['PATH'] = ghcPath
                .concat((env['PATH'] || '').split(path_1.delimiter))
                .join(path_1.delimiter);
        }
        const sandboxConfig = this.getConfigOpt('sandbox');
        if (sandboxConfig !== '') {
            env['CABAL_SANDBOX_CONFIG'] = sandboxConfig;
        }
        opts.env = env;
        return opts;
    }
}
exports.BuilderBase = BuilderBase;
//# sourceMappingURL=data:application/json;base64,