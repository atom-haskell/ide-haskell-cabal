"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ghcVerProps = {
    pathExclusive: {
        title: 'Replace PATH (rather than append to it)',
        type: 'boolean',
        default: false,
        order: 10,
    },
    pathTo: {
        type: 'array',
        title: 'PATH; comma-separated',
        default: [],
        order: 20,
    },
    sandbox: {
        type: 'string',
        title: 'Sandbox configuration file',
        default: '',
        order: 30,
    },
    buildDir: {
        type: 'string',
        title: 'Build directory',
        default: 'dist',
        order: 40,
    },
};
const ghcVersList = [
    '8.10',
    '8.8',
    '8.6',
    '8.4',
    '8.2',
    '8.0',
    '7.10',
    '7.8',
    '7.6',
    '7.4',
    '7.2',
];
const ghcVersProps = {};
let orderStart = 100;
for (const vers of ghcVersList) {
    const [maj, min] = vers.split('.');
    const key = `ghc${maj}${min.length === 1 ? `0${min}` : min}`;
    ghcVersProps[key] = {
        type: 'object',
        title: `GHC ${vers}`,
        properties: ghcVerProps,
        order: orderStart,
    };
    orderStart += 10;
}
exports.config = {
    stack: {
        type: 'object',
        properties: {
            globalArguments: {
                type: 'array',
                description: 'Global stack arguments (comma-separated)',
                default: [],
                order: 10,
            },
            buildArguments: {
                type: 'array',
                description: 'Stack build command arguments (comma-separated)',
                default: [],
                order: 20,
            },
            testArguments: {
                type: 'array',
                description: 'Stack test command arguments (comma-separated)',
                default: [],
                order: 30,
            },
            benchArguments: {
                type: 'array',
                description: 'Stack bench command arguments (comma-separated)',
                default: [],
                order: 30,
            },
            cleanArguments: {
                type: 'array',
                description: 'Stack clean command arguments (comma-separated)',
                default: [],
                order: 40,
            },
            depsArguments: {
                type: 'array',
                description: 'Stack install --only-dependencies command arguments (comma-separated)',
                default: [],
                order: 50,
            },
        },
    },
    cabal: {
        type: 'object',
        properties: Object.assign({ ignoreNoSandbox: {
                type: 'boolean',
                title: 'Install dependencies with no sandbox',
                description: 'Installing dependencies with no project sandbox is not ' +
                    'recommended, but you can do it if you enable this option',
                default: false,
                order: 1000,
            }, runHpack: {
                type: 'boolean',
                title: 'Run hpack before cabal',
                description: 'When package.yaml is detected in the same directory as ' +
                    'the cabal file, run hpack first',
                default: true,
                order: 10,
            }, activeGhcVersion: {
                type: 'string',
                title: 'Active GHC version',
                default: '8.6',
                enum: ghcVersList,
                order: 99,
            } }, ghcVersProps),
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sV0FBVyxHQUFHO0lBQ2xCLGFBQWEsRUFBRTtRQUNiLEtBQUssRUFBRSx5Q0FBeUM7UUFDaEQsSUFBSSxFQUFFLFNBQVM7UUFDZixPQUFPLEVBQUUsS0FBSztRQUNkLEtBQUssRUFBRSxFQUFFO0tBQ1Y7SUFFRCxNQUFNLEVBQUU7UUFDTixJQUFJLEVBQUUsT0FBTztRQUNiLEtBQUssRUFBRSx1QkFBdUI7UUFDOUIsT0FBTyxFQUFFLEVBQUU7UUFDWCxLQUFLLEVBQUUsRUFBRTtLQUNWO0lBRUQsT0FBTyxFQUFFO1FBQ1AsSUFBSSxFQUFFLFFBQVE7UUFDZCxLQUFLLEVBQUUsNEJBQTRCO1FBQ25DLE9BQU8sRUFBRSxFQUFFO1FBQ1gsS0FBSyxFQUFFLEVBQUU7S0FDVjtJQUVELFFBQVEsRUFBRTtRQUNSLElBQUksRUFBRSxRQUFRO1FBQ2QsS0FBSyxFQUFFLGlCQUFpQjtRQUN4QixPQUFPLEVBQUUsTUFBTTtRQUNmLEtBQUssRUFBRSxFQUFFO0tBQ1Y7Q0FDRixDQUFBO0FBRUQsTUFBTSxXQUFXLEdBQUc7SUFDbEIsTUFBTTtJQUNOLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsTUFBTTtJQUNOLEtBQUs7SUFDTCxLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7Q0FDTixDQUFBO0FBQ0QsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFBO0FBQ3ZCLElBQUksVUFBVSxHQUFHLEdBQUcsQ0FBQTtBQUNwQixLQUFLLE1BQU0sSUFBSSxJQUFJLFdBQVcsRUFBRTtJQUM5QixNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDbEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQzVELFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRztRQUNsQixJQUFJLEVBQUUsUUFBUTtRQUNkLEtBQUssRUFBRSxPQUFPLElBQUksRUFBRTtRQUNwQixVQUFVLEVBQUUsV0FBVztRQUN2QixLQUFLLEVBQUUsVUFBVTtLQUNsQixDQUFBO0lBQ0QsVUFBVSxJQUFJLEVBQUUsQ0FBQTtDQUNqQjtBQUVZLFFBQUEsTUFBTSxHQUFHO0lBQ3BCLEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxRQUFRO1FBQ2QsVUFBVSxFQUFFO1lBQ1YsZUFBZSxFQUFFO2dCQUNmLElBQUksRUFBRSxPQUFPO2dCQUNiLFdBQVcsRUFBRSwwQ0FBMEM7Z0JBQ3ZELE9BQU8sRUFBRSxFQUFFO2dCQUNYLEtBQUssRUFBRSxFQUFFO2FBQ1Y7WUFDRCxjQUFjLEVBQUU7Z0JBQ2QsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsV0FBVyxFQUFFLGlEQUFpRDtnQkFDOUQsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsS0FBSyxFQUFFLEVBQUU7YUFDVjtZQUNELGFBQWEsRUFBRTtnQkFDYixJQUFJLEVBQUUsT0FBTztnQkFDYixXQUFXLEVBQUUsZ0RBQWdEO2dCQUM3RCxPQUFPLEVBQUUsRUFBRTtnQkFDWCxLQUFLLEVBQUUsRUFBRTthQUNWO1lBQ0QsY0FBYyxFQUFFO2dCQUNkLElBQUksRUFBRSxPQUFPO2dCQUNiLFdBQVcsRUFBRSxpREFBaUQ7Z0JBQzlELE9BQU8sRUFBRSxFQUFFO2dCQUNYLEtBQUssRUFBRSxFQUFFO2FBQ1Y7WUFDRCxjQUFjLEVBQUU7Z0JBQ2QsSUFBSSxFQUFFLE9BQU87Z0JBQ2IsV0FBVyxFQUFFLGlEQUFpRDtnQkFDOUQsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsS0FBSyxFQUFFLEVBQUU7YUFDVjtZQUNELGFBQWEsRUFBRTtnQkFDYixJQUFJLEVBQUUsT0FBTztnQkFDYixXQUFXLEVBQ1QsdUVBQXVFO2dCQUN6RSxPQUFPLEVBQUUsRUFBRTtnQkFDWCxLQUFLLEVBQUUsRUFBRTthQUNWO1NBQ0Y7S0FDRjtJQUNELEtBQUssRUFBRTtRQUNMLElBQUksRUFBRSxRQUFRO1FBQ2QsVUFBVSxrQkFDUixlQUFlLEVBQUU7Z0JBQ2YsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsS0FBSyxFQUFFLHNDQUFzQztnQkFDN0MsV0FBVyxFQUNULHlEQUF5RDtvQkFDekQsMERBQTBEO2dCQUM1RCxPQUFPLEVBQUUsS0FBSztnQkFDZCxLQUFLLEVBQUUsSUFBSTthQUNaLEVBQ0QsUUFBUSxFQUFFO2dCQUNSLElBQUksRUFBRSxTQUFTO2dCQUNmLEtBQUssRUFBRSx3QkFBd0I7Z0JBQy9CLFdBQVcsRUFDVCx5REFBeUQ7b0JBQ3pELGlDQUFpQztnQkFDbkMsT0FBTyxFQUFFLElBQUk7Z0JBQ2IsS0FBSyxFQUFFLEVBQUU7YUFDVixFQUNELGdCQUFnQixFQUFFO2dCQUNoQixJQUFJLEVBQUUsUUFBUTtnQkFDZCxLQUFLLEVBQUUsb0JBQW9CO2dCQUMzQixPQUFPLEVBQUUsS0FBSztnQkFDZCxJQUFJLEVBQUUsV0FBVztnQkFDakIsS0FBSyxFQUFFLEVBQUU7YUFDVixJQUNFLFlBQVksQ0FDaEI7S0FDRjtDQUNGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBnaGNWZXJQcm9wcyA9IHtcbiAgcGF0aEV4Y2x1c2l2ZToge1xuICAgIHRpdGxlOiAnUmVwbGFjZSBQQVRIIChyYXRoZXIgdGhhbiBhcHBlbmQgdG8gaXQpJyxcbiAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgZGVmYXVsdDogZmFsc2UsXG4gICAgb3JkZXI6IDEwLFxuICB9LFxuXG4gIHBhdGhUbzoge1xuICAgIHR5cGU6ICdhcnJheScsXG4gICAgdGl0bGU6ICdQQVRIOyBjb21tYS1zZXBhcmF0ZWQnLFxuICAgIGRlZmF1bHQ6IFtdLFxuICAgIG9yZGVyOiAyMCxcbiAgfSxcblxuICBzYW5kYm94OiB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICdTYW5kYm94IGNvbmZpZ3VyYXRpb24gZmlsZScsXG4gICAgZGVmYXVsdDogJycsXG4gICAgb3JkZXI6IDMwLFxuICB9LFxuXG4gIGJ1aWxkRGlyOiB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICdCdWlsZCBkaXJlY3RvcnknLFxuICAgIGRlZmF1bHQ6ICdkaXN0JyxcbiAgICBvcmRlcjogNDAsXG4gIH0sXG59XG5cbmNvbnN0IGdoY1ZlcnNMaXN0ID0gW1xuICAnOC4xMCcsXG4gICc4LjgnLFxuICAnOC42JyxcbiAgJzguNCcsXG4gICc4LjInLFxuICAnOC4wJyxcbiAgJzcuMTAnLFxuICAnNy44JyxcbiAgJzcuNicsXG4gICc3LjQnLFxuICAnNy4yJyxcbl1cbmNvbnN0IGdoY1ZlcnNQcm9wcyA9IHt9XG5sZXQgb3JkZXJTdGFydCA9IDEwMFxuZm9yIChjb25zdCB2ZXJzIG9mIGdoY1ZlcnNMaXN0KSB7XG4gIGNvbnN0IFttYWosIG1pbl0gPSB2ZXJzLnNwbGl0KCcuJylcbiAgY29uc3Qga2V5ID0gYGdoYyR7bWFqfSR7bWluLmxlbmd0aCA9PT0gMSA/IGAwJHttaW59YCA6IG1pbn1gXG4gIGdoY1ZlcnNQcm9wc1trZXldID0ge1xuICAgIHR5cGU6ICdvYmplY3QnLFxuICAgIHRpdGxlOiBgR0hDICR7dmVyc31gLFxuICAgIHByb3BlcnRpZXM6IGdoY1ZlclByb3BzLFxuICAgIG9yZGVyOiBvcmRlclN0YXJ0LFxuICB9XG4gIG9yZGVyU3RhcnQgKz0gMTBcbn1cblxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgc3RhY2s6IHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBnbG9iYWxBcmd1bWVudHM6IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdHbG9iYWwgc3RhY2sgYXJndW1lbnRzIChjb21tYS1zZXBhcmF0ZWQpJyxcbiAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgIG9yZGVyOiAxMCxcbiAgICAgIH0sXG4gICAgICBidWlsZEFyZ3VtZW50czoge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1N0YWNrIGJ1aWxkIGNvbW1hbmQgYXJndW1lbnRzIChjb21tYS1zZXBhcmF0ZWQpJyxcbiAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgIG9yZGVyOiAyMCxcbiAgICAgIH0sXG4gICAgICB0ZXN0QXJndW1lbnRzOiB7XG4gICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnU3RhY2sgdGVzdCBjb21tYW5kIGFyZ3VtZW50cyAoY29tbWEtc2VwYXJhdGVkKScsXG4gICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgICBvcmRlcjogMzAsXG4gICAgICB9LFxuICAgICAgYmVuY2hBcmd1bWVudHM6IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdTdGFjayBiZW5jaCBjb21tYW5kIGFyZ3VtZW50cyAoY29tbWEtc2VwYXJhdGVkKScsXG4gICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgICBvcmRlcjogMzAsXG4gICAgICB9LFxuICAgICAgY2xlYW5Bcmd1bWVudHM6IHtcbiAgICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdTdGFjayBjbGVhbiBjb21tYW5kIGFyZ3VtZW50cyAoY29tbWEtc2VwYXJhdGVkKScsXG4gICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgICBvcmRlcjogNDAsXG4gICAgICB9LFxuICAgICAgZGVwc0FyZ3VtZW50czoge1xuICAgICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAnU3RhY2sgaW5zdGFsbCAtLW9ubHktZGVwZW5kZW5jaWVzIGNvbW1hbmQgYXJndW1lbnRzIChjb21tYS1zZXBhcmF0ZWQpJyxcbiAgICAgICAgZGVmYXVsdDogW10sXG4gICAgICAgIG9yZGVyOiA1MCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgY2FiYWw6IHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBpZ25vcmVOb1NhbmRib3g6IHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICB0aXRsZTogJ0luc3RhbGwgZGVwZW5kZW5jaWVzIHdpdGggbm8gc2FuZGJveCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICdJbnN0YWxsaW5nIGRlcGVuZGVuY2llcyB3aXRoIG5vIHByb2plY3Qgc2FuZGJveCBpcyBub3QgJyArXG4gICAgICAgICAgJ3JlY29tbWVuZGVkLCBidXQgeW91IGNhbiBkbyBpdCBpZiB5b3UgZW5hYmxlIHRoaXMgb3B0aW9uJyxcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgIG9yZGVyOiAxMDAwLFxuICAgICAgfSxcbiAgICAgIHJ1bkhwYWNrOiB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgdGl0bGU6ICdSdW4gaHBhY2sgYmVmb3JlIGNhYmFsJyxcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgJ1doZW4gcGFja2FnZS55YW1sIGlzIGRldGVjdGVkIGluIHRoZSBzYW1lIGRpcmVjdG9yeSBhcyAnICtcbiAgICAgICAgICAndGhlIGNhYmFsIGZpbGUsIHJ1biBocGFjayBmaXJzdCcsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIG9yZGVyOiAxMCxcbiAgICAgIH0sXG4gICAgICBhY3RpdmVHaGNWZXJzaW9uOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICB0aXRsZTogJ0FjdGl2ZSBHSEMgdmVyc2lvbicsXG4gICAgICAgIGRlZmF1bHQ6ICc4LjYnLFxuICAgICAgICBlbnVtOiBnaGNWZXJzTGlzdCxcbiAgICAgICAgb3JkZXI6IDk5LFxuICAgICAgfSxcbiAgICAgIC4uLmdoY1ZlcnNQcm9wcyxcbiAgICB9LFxuICB9LFxufVxuXG4vLyBnZW5lcmF0ZWQgYnkgdHlwZWQtY29uZmlnLmpzXG5kZWNsYXJlIG1vZHVsZSAnYXRvbScge1xuICBpbnRlcmZhY2UgQ29uZmlnVmFsdWVzIHtcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuc3RhY2suZ2xvYmFsQXJndW1lbnRzJzogYW55W11cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuc3RhY2suYnVpbGRBcmd1bWVudHMnOiBhbnlbXVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay50ZXN0QXJndW1lbnRzJzogYW55W11cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuc3RhY2suYmVuY2hBcmd1bWVudHMnOiBhbnlbXVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5zdGFjay5jbGVhbkFyZ3VtZW50cyc6IGFueVtdXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLnN0YWNrLmRlcHNBcmd1bWVudHMnOiBhbnlbXVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5zdGFjayc6IHtcbiAgICAgIGdsb2JhbEFyZ3VtZW50czogYW55W11cbiAgICAgIGJ1aWxkQXJndW1lbnRzOiBhbnlbXVxuICAgICAgdGVzdEFyZ3VtZW50czogYW55W11cbiAgICAgIGJlbmNoQXJndW1lbnRzOiBhbnlbXVxuICAgICAgY2xlYW5Bcmd1bWVudHM6IGFueVtdXG4gICAgICBkZXBzQXJndW1lbnRzOiBhbnlbXVxuICAgIH1cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuaWdub3JlTm9TYW5kYm94JzogYm9vbGVhblxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5ydW5IcGFjayc6IGJvb2xlYW5cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuYWN0aXZlR2hjVmVyc2lvbic6XG4gICAgICB8ICc3LjInXG4gICAgICB8ICc3LjQnXG4gICAgICB8ICc3LjYnXG4gICAgICB8ICc3LjgnXG4gICAgICB8ICc3LjEwJ1xuICAgICAgfCAnOC4wJ1xuICAgICAgfCAnOC4yJ1xuICAgICAgfCAnOC40J1xuICAgICAgfCAnOC42J1xuICAgICAgfCAnOC44J1xuICAgICAgfCAnOC4xMCdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzAyLnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwMi5wYXRoVG8nOiBhbnlbXVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDIuc2FuZGJveCc6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDIuYnVpbGREaXInOiBzdHJpbmdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzAyJzoge1xuICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgfVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDQucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzA0LnBhdGhUbyc6IGFueVtdXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwNC5zYW5kYm94Jzogc3RyaW5nXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwNC5idWlsZERpcic6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDQnOiB7XG4gICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICBwYXRoVG86IGFueVtdXG4gICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICB9XG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwNi5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDYucGF0aFRvJzogYW55W11cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzA2LnNhbmRib3gnOiBzdHJpbmdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzA2LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwNic6IHtcbiAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgIHBhdGhUbzogYW55W11cbiAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgIH1cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzA4LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcwOC5wYXRoVG8nOiBhbnlbXVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDguc2FuZGJveCc6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MDguYnVpbGREaXInOiBzdHJpbmdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzA4Jzoge1xuICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgfVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MTAucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjNzEwLnBhdGhUbyc6IGFueVtdXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcxMC5zYW5kYm94Jzogc3RyaW5nXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzcxMC5idWlsZERpcic6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM3MTAnOiB7XG4gICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICBwYXRoVG86IGFueVtdXG4gICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICB9XG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwMC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDAucGF0aFRvJzogYW55W11cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODAwLnNhbmRib3gnOiBzdHJpbmdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODAwLmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwMCc6IHtcbiAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgIHBhdGhUbzogYW55W11cbiAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgIH1cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODAyLnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwMi5wYXRoVG8nOiBhbnlbXVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDIuc2FuZGJveCc6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDIuYnVpbGREaXInOiBzdHJpbmdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODAyJzoge1xuICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgfVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDQucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODA0LnBhdGhUbyc6IGFueVtdXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwNC5zYW5kYm94Jzogc3RyaW5nXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwNC5idWlsZERpcic6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDQnOiB7XG4gICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICBwYXRoVG86IGFueVtdXG4gICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICB9XG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwNi5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDYucGF0aFRvJzogYW55W11cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODA2LnNhbmRib3gnOiBzdHJpbmdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODA2LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwNic6IHtcbiAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgIHBhdGhUbzogYW55W11cbiAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgIH1cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODA4LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgwOC5wYXRoVG8nOiBhbnlbXVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDguc2FuZGJveCc6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MDguYnVpbGREaXInOiBzdHJpbmdcbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODA4Jzoge1xuICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgfVxuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MTAucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAnaWRlLWhhc2tlbGwtY2FiYWwuY2FiYWwuZ2hjODEwLnBhdGhUbyc6IGFueVtdXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgxMC5zYW5kYm94Jzogc3RyaW5nXG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsLmdoYzgxMC5idWlsZERpcic6IHN0cmluZ1xuICAgICdpZGUtaGFza2VsbC1jYWJhbC5jYWJhbC5naGM4MTAnOiB7XG4gICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICBwYXRoVG86IGFueVtdXG4gICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICB9XG4gICAgJ2lkZS1oYXNrZWxsLWNhYmFsLmNhYmFsJzoge1xuICAgICAgaWdub3JlTm9TYW5kYm94OiBib29sZWFuXG4gICAgICBydW5IcGFjazogYm9vbGVhblxuICAgICAgYWN0aXZlR2hjVmVyc2lvbjpcbiAgICAgICAgfCAnNy4yJ1xuICAgICAgICB8ICc3LjQnXG4gICAgICAgIHwgJzcuNidcbiAgICAgICAgfCAnNy44J1xuICAgICAgICB8ICc3LjEwJ1xuICAgICAgICB8ICc4LjAnXG4gICAgICAgIHwgJzguMidcbiAgICAgICAgfCAnOC40J1xuICAgICAgICB8ICc4LjYnXG4gICAgICAgIHwgJzguOCdcbiAgICAgICAgfCAnOC4xMCdcbiAgICAgICdnaGM3MDIucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdnaGM3MDIucGF0aFRvJzogYW55W11cbiAgICAgICdnaGM3MDIuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2doYzcwMi5idWlsZERpcic6IHN0cmluZ1xuICAgICAgZ2hjNzAyOiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgJ2doYzcwNC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgJ2doYzcwNC5wYXRoVG8nOiBhbnlbXVxuICAgICAgJ2doYzcwNC5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAnZ2hjNzA0LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICBnaGM3MDQ6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgICAnZ2hjNzA2LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAnZ2hjNzA2LnBhdGhUbyc6IGFueVtdXG4gICAgICAnZ2hjNzA2LnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICdnaGM3MDYuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgIGdoYzcwNjoge1xuICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgIH1cbiAgICAgICdnaGM3MDgucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdnaGM3MDgucGF0aFRvJzogYW55W11cbiAgICAgICdnaGM3MDguc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2doYzcwOC5idWlsZERpcic6IHN0cmluZ1xuICAgICAgZ2hjNzA4OiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgJ2doYzcxMC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgJ2doYzcxMC5wYXRoVG8nOiBhbnlbXVxuICAgICAgJ2doYzcxMC5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAnZ2hjNzEwLmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICBnaGM3MTA6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgICAnZ2hjODAwLnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAnZ2hjODAwLnBhdGhUbyc6IGFueVtdXG4gICAgICAnZ2hjODAwLnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICdnaGM4MDAuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgIGdoYzgwMDoge1xuICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgIH1cbiAgICAgICdnaGM4MDIucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdnaGM4MDIucGF0aFRvJzogYW55W11cbiAgICAgICdnaGM4MDIuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2doYzgwMi5idWlsZERpcic6IHN0cmluZ1xuICAgICAgZ2hjODAyOiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgJ2doYzgwNC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgJ2doYzgwNC5wYXRoVG8nOiBhbnlbXVxuICAgICAgJ2doYzgwNC5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAnZ2hjODA0LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICBnaGM4MDQ6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgICAnZ2hjODA2LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAnZ2hjODA2LnBhdGhUbyc6IGFueVtdXG4gICAgICAnZ2hjODA2LnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICdnaGM4MDYuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgIGdoYzgwNjoge1xuICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgIH1cbiAgICAgICdnaGM4MDgucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdnaGM4MDgucGF0aFRvJzogYW55W11cbiAgICAgICdnaGM4MDguc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2doYzgwOC5idWlsZERpcic6IHN0cmluZ1xuICAgICAgZ2hjODA4OiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgJ2doYzgxMC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgJ2doYzgxMC5wYXRoVG8nOiBhbnlbXVxuICAgICAgJ2doYzgxMC5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAnZ2hjODEwLmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICBnaGM4MTA6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgfVxuICAgICdpZGUtaGFza2VsbC1jYWJhbCc6IHtcbiAgICAgICdzdGFjay5nbG9iYWxBcmd1bWVudHMnOiBhbnlbXVxuICAgICAgJ3N0YWNrLmJ1aWxkQXJndW1lbnRzJzogYW55W11cbiAgICAgICdzdGFjay50ZXN0QXJndW1lbnRzJzogYW55W11cbiAgICAgICdzdGFjay5iZW5jaEFyZ3VtZW50cyc6IGFueVtdXG4gICAgICAnc3RhY2suY2xlYW5Bcmd1bWVudHMnOiBhbnlbXVxuICAgICAgJ3N0YWNrLmRlcHNBcmd1bWVudHMnOiBhbnlbXVxuICAgICAgc3RhY2s6IHtcbiAgICAgICAgZ2xvYmFsQXJndW1lbnRzOiBhbnlbXVxuICAgICAgICBidWlsZEFyZ3VtZW50czogYW55W11cbiAgICAgICAgdGVzdEFyZ3VtZW50czogYW55W11cbiAgICAgICAgYmVuY2hBcmd1bWVudHM6IGFueVtdXG4gICAgICAgIGNsZWFuQXJndW1lbnRzOiBhbnlbXVxuICAgICAgICBkZXBzQXJndW1lbnRzOiBhbnlbXVxuICAgICAgfVxuICAgICAgJ2NhYmFsLmlnbm9yZU5vU2FuZGJveCc6IGJvb2xlYW5cbiAgICAgICdjYWJhbC5ydW5IcGFjayc6IGJvb2xlYW5cbiAgICAgICdjYWJhbC5hY3RpdmVHaGNWZXJzaW9uJzpcbiAgICAgICAgfCAnNy4yJ1xuICAgICAgICB8ICc3LjQnXG4gICAgICAgIHwgJzcuNidcbiAgICAgICAgfCAnNy44J1xuICAgICAgICB8ICc3LjEwJ1xuICAgICAgICB8ICc4LjAnXG4gICAgICAgIHwgJzguMidcbiAgICAgICAgfCAnOC40J1xuICAgICAgICB8ICc4LjYnXG4gICAgICAgIHwgJzguOCdcbiAgICAgICAgfCAnOC4xMCdcbiAgICAgICdjYWJhbC5naGM3MDIucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdjYWJhbC5naGM3MDIucGF0aFRvJzogYW55W11cbiAgICAgICdjYWJhbC5naGM3MDIuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzcwMi5idWlsZERpcic6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzcwMic6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgICAnY2FiYWwuZ2hjNzA0LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAnY2FiYWwuZ2hjNzA0LnBhdGhUbyc6IGFueVtdXG4gICAgICAnY2FiYWwuZ2hjNzA0LnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM3MDQuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM3MDQnOiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgJ2NhYmFsLmdoYzcwNi5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgJ2NhYmFsLmdoYzcwNi5wYXRoVG8nOiBhbnlbXVxuICAgICAgJ2NhYmFsLmdoYzcwNi5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAnY2FiYWwuZ2hjNzA2LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICAnY2FiYWwuZ2hjNzA2Jzoge1xuICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgIH1cbiAgICAgICdjYWJhbC5naGM3MDgucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdjYWJhbC5naGM3MDgucGF0aFRvJzogYW55W11cbiAgICAgICdjYWJhbC5naGM3MDguc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzcwOC5idWlsZERpcic6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzcwOCc6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgICAnY2FiYWwuZ2hjNzEwLnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAnY2FiYWwuZ2hjNzEwLnBhdGhUbyc6IGFueVtdXG4gICAgICAnY2FiYWwuZ2hjNzEwLnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM3MTAuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM3MTAnOiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgJ2NhYmFsLmdoYzgwMC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgJ2NhYmFsLmdoYzgwMC5wYXRoVG8nOiBhbnlbXVxuICAgICAgJ2NhYmFsLmdoYzgwMC5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAnY2FiYWwuZ2hjODAwLmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICAnY2FiYWwuZ2hjODAwJzoge1xuICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgIH1cbiAgICAgICdjYWJhbC5naGM4MDIucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdjYWJhbC5naGM4MDIucGF0aFRvJzogYW55W11cbiAgICAgICdjYWJhbC5naGM4MDIuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzgwMi5idWlsZERpcic6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzgwMic6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgICAnY2FiYWwuZ2hjODA0LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAnY2FiYWwuZ2hjODA0LnBhdGhUbyc6IGFueVtdXG4gICAgICAnY2FiYWwuZ2hjODA0LnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM4MDQuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM4MDQnOiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgJ2NhYmFsLmdoYzgwNi5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgJ2NhYmFsLmdoYzgwNi5wYXRoVG8nOiBhbnlbXVxuICAgICAgJ2NhYmFsLmdoYzgwNi5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAnY2FiYWwuZ2hjODA2LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICAnY2FiYWwuZ2hjODA2Jzoge1xuICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgIH1cbiAgICAgICdjYWJhbC5naGM4MDgucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICdjYWJhbC5naGM4MDgucGF0aFRvJzogYW55W11cbiAgICAgICdjYWJhbC5naGM4MDguc2FuZGJveCc6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzgwOC5idWlsZERpcic6IHN0cmluZ1xuICAgICAgJ2NhYmFsLmdoYzgwOCc6IHtcbiAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICB9XG4gICAgICAnY2FiYWwuZ2hjODEwLnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAnY2FiYWwuZ2hjODEwLnBhdGhUbyc6IGFueVtdXG4gICAgICAnY2FiYWwuZ2hjODEwLnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM4MTAuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICdjYWJhbC5naGM4MTAnOiB7XG4gICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgfVxuICAgICAgY2FiYWw6IHtcbiAgICAgICAgaWdub3JlTm9TYW5kYm94OiBib29sZWFuXG4gICAgICAgIHJ1bkhwYWNrOiBib29sZWFuXG4gICAgICAgIGFjdGl2ZUdoY1ZlcnNpb246XG4gICAgICAgICAgfCAnNy4yJ1xuICAgICAgICAgIHwgJzcuNCdcbiAgICAgICAgICB8ICc3LjYnXG4gICAgICAgICAgfCAnNy44J1xuICAgICAgICAgIHwgJzcuMTAnXG4gICAgICAgICAgfCAnOC4wJ1xuICAgICAgICAgIHwgJzguMidcbiAgICAgICAgICB8ICc4LjQnXG4gICAgICAgICAgfCAnOC42J1xuICAgICAgICAgIHwgJzguOCdcbiAgICAgICAgICB8ICc4LjEwJ1xuICAgICAgICAnZ2hjNzAyLnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAgICdnaGM3MDIucGF0aFRvJzogYW55W11cbiAgICAgICAgJ2doYzcwMi5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAgICdnaGM3MDIuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICAgZ2hjNzAyOiB7XG4gICAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICAgIH1cbiAgICAgICAgJ2doYzcwNC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgICAnZ2hjNzA0LnBhdGhUbyc6IGFueVtdXG4gICAgICAgICdnaGM3MDQuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgICAnZ2hjNzA0LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICAgIGdoYzcwNDoge1xuICAgICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgICB9XG4gICAgICAgICdnaGM3MDYucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICAgJ2doYzcwNi5wYXRoVG8nOiBhbnlbXVxuICAgICAgICAnZ2hjNzA2LnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICAgJ2doYzcwNi5idWlsZERpcic6IHN0cmluZ1xuICAgICAgICBnaGM3MDY6IHtcbiAgICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgICAgfVxuICAgICAgICAnZ2hjNzA4LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAgICdnaGM3MDgucGF0aFRvJzogYW55W11cbiAgICAgICAgJ2doYzcwOC5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAgICdnaGM3MDguYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICAgZ2hjNzA4OiB7XG4gICAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICAgIH1cbiAgICAgICAgJ2doYzcxMC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgICAnZ2hjNzEwLnBhdGhUbyc6IGFueVtdXG4gICAgICAgICdnaGM3MTAuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgICAnZ2hjNzEwLmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICAgIGdoYzcxMDoge1xuICAgICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgICB9XG4gICAgICAgICdnaGM4MDAucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICAgJ2doYzgwMC5wYXRoVG8nOiBhbnlbXVxuICAgICAgICAnZ2hjODAwLnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICAgJ2doYzgwMC5idWlsZERpcic6IHN0cmluZ1xuICAgICAgICBnaGM4MDA6IHtcbiAgICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgICAgfVxuICAgICAgICAnZ2hjODAyLnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAgICdnaGM4MDIucGF0aFRvJzogYW55W11cbiAgICAgICAgJ2doYzgwMi5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAgICdnaGM4MDIuYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICAgZ2hjODAyOiB7XG4gICAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICAgIH1cbiAgICAgICAgJ2doYzgwNC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgICAnZ2hjODA0LnBhdGhUbyc6IGFueVtdXG4gICAgICAgICdnaGM4MDQuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgICAnZ2hjODA0LmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICAgIGdoYzgwNDoge1xuICAgICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgICB9XG4gICAgICAgICdnaGM4MDYucGF0aEV4Y2x1c2l2ZSc6IGJvb2xlYW5cbiAgICAgICAgJ2doYzgwNi5wYXRoVG8nOiBhbnlbXVxuICAgICAgICAnZ2hjODA2LnNhbmRib3gnOiBzdHJpbmdcbiAgICAgICAgJ2doYzgwNi5idWlsZERpcic6IHN0cmluZ1xuICAgICAgICBnaGM4MDY6IHtcbiAgICAgICAgICBwYXRoRXhjbHVzaXZlOiBib29sZWFuXG4gICAgICAgICAgcGF0aFRvOiBhbnlbXVxuICAgICAgICAgIHNhbmRib3g6IHN0cmluZ1xuICAgICAgICAgIGJ1aWxkRGlyOiBzdHJpbmdcbiAgICAgICAgfVxuICAgICAgICAnZ2hjODA4LnBhdGhFeGNsdXNpdmUnOiBib29sZWFuXG4gICAgICAgICdnaGM4MDgucGF0aFRvJzogYW55W11cbiAgICAgICAgJ2doYzgwOC5zYW5kYm94Jzogc3RyaW5nXG4gICAgICAgICdnaGM4MDguYnVpbGREaXInOiBzdHJpbmdcbiAgICAgICAgZ2hjODA4OiB7XG4gICAgICAgICAgcGF0aEV4Y2x1c2l2ZTogYm9vbGVhblxuICAgICAgICAgIHBhdGhUbzogYW55W11cbiAgICAgICAgICBzYW5kYm94OiBzdHJpbmdcbiAgICAgICAgICBidWlsZERpcjogc3RyaW5nXG4gICAgICAgIH1cbiAgICAgICAgJ2doYzgxMC5wYXRoRXhjbHVzaXZlJzogYm9vbGVhblxuICAgICAgICAnZ2hjODEwLnBhdGhUbyc6IGFueVtdXG4gICAgICAgICdnaGM4MTAuc2FuZGJveCc6IHN0cmluZ1xuICAgICAgICAnZ2hjODEwLmJ1aWxkRGlyJzogc3RyaW5nXG4gICAgICAgIGdoYzgxMDoge1xuICAgICAgICAgIHBhdGhFeGNsdXNpdmU6IGJvb2xlYW5cbiAgICAgICAgICBwYXRoVG86IGFueVtdXG4gICAgICAgICAgc2FuZGJveDogc3RyaW5nXG4gICAgICAgICAgYnVpbGREaXI6IHN0cmluZ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=